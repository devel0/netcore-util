### YamlMime:ManagedReference
items:
- uid: SearchAThing.UtilExt
  commentId: T:SearchAThing.UtilExt
  id: UtilExt
  parent: SearchAThing
  children:
  - SearchAThing.UtilExt.Align(System.String,System.Int32,SearchAThing.ColumnAlignment)
  - SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  - SearchAThing.UtilExt.CompareTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.ContainsIgnoreCase(System.String,System.String)
  - SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  - SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  - SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  - SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  - SearchAThing.UtilExt.CreateGetterSetter``2(Expression{Func{``0,``1}})
  - SearchAThing.UtilExt.Details(Exception,System.Boolean)
  - SearchAThing.UtilExt.DetailsObject(Exception)
  - SearchAThing.UtilExt.Distinct``2(IEnumerable{``0},Func{``0,``1})
  - SearchAThing.UtilExt.EqualsAutoTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.EqualsTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  - SearchAThing.UtilExt.Export(System.Double[])
  - SearchAThing.UtilExt.GetJsonArray(System.String)
  - SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  - SearchAThing.UtilExt.GetMemberName``1(Expression{Func{``0,System.Object}})
  - SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  - SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{``0,System.Object}})
  - SearchAThing.UtilExt.GetMemberNamesExt``1(Expression{Func{``0,System.Object}})
  - SearchAThing.UtilExt.GreatThanOrEqualsTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.GreatThanTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.HumanReadable(System.Int64,System.Boolean,System.Int64,System.Int32)
  - SearchAThing.UtilExt.Import(System.String)
  - SearchAThing.UtilExt.InvariantDate(DateTime,System.String)
  - SearchAThing.UtilExt.InvarianteDateTime(DateTime,System.String,System.String)
  - SearchAThing.UtilExt.InvariantTime(DateTime,System.String)
  - SearchAThing.UtilExt.InvDoubleParse(System.String)
  - SearchAThing.UtilExt.IsInRange(System.Double,System.Double,System.String)
  - SearchAThing.UtilExt.Latest(System.String,System.Int32,System.String)
  - SearchAThing.UtilExt.LessThanOrEqualsTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.LessThanTol(System.Double,System.Double,System.Double)
  - SearchAThing.UtilExt.Lines(System.String,System.Boolean)
  - SearchAThing.UtilExt.Magnitude(System.Double)
  - SearchAThing.UtilExt.MatchesFilter(IEnumerable{System.String},System.String,System.Boolean)
  - SearchAThing.UtilExt.Mean(IEnumerable{System.Double})
  - SearchAThing.UtilExt.MRound(System.Double,System.Double)
  - SearchAThing.UtilExt.MRound(System.Double,System.Nullable{System.Double})
  - SearchAThing.UtilExt.MRound(System.Nullable{System.Double},System.Double)
  - SearchAThing.UtilExt.NextLine(System.String,System.Int32@)
  - SearchAThing.UtilExt.NormalizeFilename(System.String,System.Char)
  - SearchAThing.UtilExt.NormalizeWorksheetName(System.String)
  - SearchAThing.UtilExt.ParseInt(System.String)
  - SearchAThing.UtilExt.PercentDifference(System.Double,System.Double)
  - SearchAThing.UtilExt.RegexMatch(System.String,System.String,RegexOptions)
  - SearchAThing.UtilExt.Repeat(System.String,System.Int32)
  - SearchAThing.UtilExt.Sign(System.Double)
  - SearchAThing.UtilExt.Sign(System.Int32)
  - SearchAThing.UtilExt.SmartDoubleParse(System.String)
  - SearchAThing.UtilExt.Sort``2(ObservableCollection{``0},Func{``0,``1},System.Boolean)
  - SearchAThing.UtilExt.Split(System.String,System.String)
  - SearchAThing.UtilExt.Stringify(System.Double,System.Int32)
  - SearchAThing.UtilExt.StripBegin(System.String,System.Char,System.Boolean)
  - SearchAThing.UtilExt.StripBegin(System.String,System.String,System.Boolean)
  - SearchAThing.UtilExt.StripEnd(System.String,System.Char,System.Boolean)
  - SearchAThing.UtilExt.StripEnd(System.String,System.String,System.Boolean)
  - SearchAThing.UtilExt.TableFormat(IEnumerable{IEnumerable{System.String}},IEnumerable{System.String},IEnumerable{SearchAThing.ColumnAlignment},System.Int32)
  - SearchAThing.UtilExt.ToDeg(System.Double)
  - SearchAThing.UtilExt.ToExpando(System.Object)
  - SearchAThing.UtilExt.ToJson(System.Object)
  - SearchAThing.UtilExt.ToRad(System.Double)
  - SearchAThing.UtilExt.ToString(System.Double,System.Int32)
  - SearchAThing.UtilExt.ToStringWrapper(StringBuilder)
  - SearchAThing.UtilExt.TrimNonNumericCharacters(System.String)
  - SearchAThing.UtilExt.UnspecifiedAsUTCDateTime(DateTime)
  - SearchAThing.UtilExt.WildcardMatch(System.String,System.String,System.Boolean)
  - SearchAThing.UtilExt.WildcardToRegex(System.String)
  - SearchAThing.UtilExt.WithIndex``1(IEnumerable{``0})
  - SearchAThing.UtilExt.WithIndexIsLast``1(IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: UtilExt
  nameWithType: UtilExt
  fullName: SearchAThing.UtilExt
  type: Class
  source:
    id: UtilExt
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 16
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: 'public static class UtilExt : object'
    content.vb: >-
      Public Module UtilExt
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SearchAThing.UtilExt.UnspecifiedAsUTCDateTime(DateTime)
  commentId: M:SearchAThing.UtilExt.UnspecifiedAsUTCDateTime(DateTime)
  id: UnspecifiedAsUTCDateTime(DateTime)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: UnspecifiedAsUTCDateTime(DateTime)
  nameWithType: UtilExt.UnspecifiedAsUTCDateTime(DateTime)
  fullName: SearchAThing.UtilExt.UnspecifiedAsUTCDateTime(DateTime)
  type: Method
  source:
    id: UnspecifiedAsUTCDateTime
    path: Z:\netcore-util\netcore-util\Date.cs
    startLine: 11
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nif given dt has unspecified kind rectifies to UTC without any conversion\n"
  example: []
  syntax:
    content: public static DateTime UnspecifiedAsUTCDateTime(this DateTime dt)
    parameters:
    - id: dt
      type: DateTime
    return:
      type: DateTime
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnspecifiedAsUTCDateTime(dt As DateTime) As DateTime
  overload: SearchAThing.UtilExt.UnspecifiedAsUTCDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.ToExpando(System.Object)
  commentId: M:SearchAThing.UtilExt.ToExpando(System.Object)
  id: ToExpando(System.Object)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ToExpando(Object)
  nameWithType: UtilExt.ToExpando(Object)
  fullName: SearchAThing.UtilExt.ToExpando(System.Object)
  type: Method
  source:
    id: ToExpando
    path: Z:\netcore-util\netcore-util\Dynamic.cs
    startLine: 45
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncreate an expando object by copying given src\n"
  example: []
  syntax:
    content: public static ExpandoObject ToExpando(this object src)
    parameters:
    - id: src
      type: System.Object
    return:
      type: ExpandoObject
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToExpando(src As Object) As ExpandoObject
  overload: SearchAThing.UtilExt.ToExpando*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Details(Exception,System.Boolean)
  commentId: M:SearchAThing.UtilExt.Details(Exception,System.Boolean)
  id: Details(Exception,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Details(Exception, Boolean)
  nameWithType: UtilExt.Details(Exception, Boolean)
  fullName: SearchAThing.UtilExt.Details(Exception, System.Boolean)
  type: Method
  source:
    id: Details
    path: Z:\netcore-util\netcore-util\Exception.cs
    startLine: 38
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static string Details(this Exception ex, bool includeStackTrace = true)
    parameters:
    - id: ex
      type: Exception
    - id: includeStackTrace
      type: System.Boolean
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Details(ex As Exception, includeStackTrace As Boolean = True) As String
  overload: SearchAThing.UtilExt.Details*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.DetailsObject(Exception)
  commentId: M:SearchAThing.UtilExt.DetailsObject(Exception)
  id: DetailsObject(Exception)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: DetailsObject(Exception)
  nameWithType: UtilExt.DetailsObject(Exception)
  fullName: SearchAThing.UtilExt.DetailsObject(Exception)
  type: Method
  source:
    id: DetailsObject
    path: Z:\netcore-util\netcore-util\Exception.cs
    startLine: 43
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static ErrorInfo DetailsObject(this Exception _ex)
    parameters:
    - id: _ex
      type: Exception
    return:
      type: SearchAThing.ErrorInfo
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetailsObject(_ex As Exception) As ErrorInfo
  overload: SearchAThing.UtilExt.DetailsObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{``0,System.Object}})
  id: GetMemberNames``1(Expression{Func{``0,System.Object}})
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GetMemberNames<T>(Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberNames<T>(Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberNames<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: GetMemberNames
    path: Z:\netcore-util\netcore-util\Expression.cs
    startLine: 15
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nretrieve list of member names from a functor like `x=>new {x.membername1, x.membername2, ...}` or `x=>x.membername`\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetMemberNames<T>(Expression<Func<T, object>> membersExpr)
    parameters:
    - id: membersExpr
      type: Expression{Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.String}
    content.vb: Public Shared Function GetMemberNames(Of T)(membersExpr As Expression(Of Func(Of T, Object))) As IEnumerable(Of String)
  overload: SearchAThing.UtilExt.GetMemberNames*
  nameWithType.vb: UtilExt.GetMemberNames(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.GetMemberNames(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberNames(Of T)(Expression(Of Func(Of T, Object)))
- uid: SearchAThing.UtilExt.GetMemberNamesExt``1(Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberNamesExt``1(Expression{Func{``0,System.Object}})
  id: GetMemberNamesExt``1(Expression{Func{``0,System.Object}})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GetMemberNamesExt<T>(Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberNamesExt<T>(Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberNamesExt<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: GetMemberNamesExt
    path: Z:\netcore-util\netcore-util\Expression.cs
    startLine: 23
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nretrieve list of member names from a functor like `x=>new {x.membername1, x.membername2, ...}` or `x=>x.membername`\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetMemberNamesExt<T>(this Expression<Func<T, object>> membersExpr)
    parameters:
    - id: membersExpr
      type: Expression{Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMemberNamesExt(Of T)(membersExpr As Expression(Of Func(Of T, Object))) As IEnumerable(Of String)
  overload: SearchAThing.UtilExt.GetMemberNamesExt*
  nameWithType.vb: UtilExt.GetMemberNamesExt(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.GetMemberNamesExt(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberNamesExt(Of T)(Expression(Of Func(Of T, Object)))
- uid: SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  id: GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GetMemberNames<T>(T, Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberNames<T>(T, Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberNames<T>(T, Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: GetMemberNames
    path: Z:\netcore-util\netcore-util\Expression.cs
    startLine: 72
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nretrieve list of member names from a functor like `x=>new {x.membername1, x.membername2, ...}` or `x=>x.membername`\n"
  example: []
  syntax:
    content: public static HashSet<string> GetMemberNames<T>(this T obj, Expression<Func<T, object>> membersExpr)
    parameters:
    - id: obj
      type: '{T}'
    - id: membersExpr
      type: Expression{Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: HashSet{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMemberNames(Of T)(obj As T, membersExpr As Expression(Of Func(Of T, Object))) As HashSet(Of String)
  overload: SearchAThing.UtilExt.GetMemberNames*
  nameWithType.vb: UtilExt.GetMemberNames(Of T)(T, Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.GetMemberNames(Of T)(T, Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberNames(Of T)(T, Expression(Of Func(Of T, Object)))
- uid: SearchAThing.UtilExt.GetMemberName``1(Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberName``1(Expression{Func{``0,System.Object}})
  id: GetMemberName``1(Expression{Func{``0,System.Object}})
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GetMemberName<T>(Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberName<T>(Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberName<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: GetMemberName
    path: Z:\netcore-util\netcore-util\Expression.cs
    startLine: 80
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nretrieve member name from a functor like `x=>x.membername1\n"
  example: []
  syntax:
    content: >-
      public static string GetMemberName<T>(Expression<Func<T, object>> membersExpr)
          where T : class
    parameters:
    - id: membersExpr
      type: Expression{Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function GetMemberName(Of T As Class)(membersExpr As Expression(Of Func(Of T, Object))) As String
  overload: SearchAThing.UtilExt.GetMemberName*
  nameWithType.vb: UtilExt.GetMemberName(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.GetMemberName(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberName(Of T)(Expression(Of Func(Of T, Object)))
- uid: SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  id: GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GetMemberName<T>(T, Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberName<T>(T, Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberName<T>(T, Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: GetMemberName
    path: Z:\netcore-util\netcore-util\Expression.cs
    startLine: 88
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nretrieve member name from a functor like `x=>x.membername1\n"
  example: []
  syntax:
    content: public static string GetMemberName<T>(this T obj, Expression<Func<T, object>> membersExpr)
    parameters:
    - id: obj
      type: '{T}'
    - id: membersExpr
      type: Expression{Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMemberName(Of T)(obj As T, membersExpr As Expression(Of Func(Of T, Object))) As String
  overload: SearchAThing.UtilExt.GetMemberName*
  nameWithType.vb: UtilExt.GetMemberName(Of T)(T, Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.GetMemberName(Of T)(T, Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberName(Of T)(T, Expression(Of Func(Of T, Object)))
- uid: SearchAThing.UtilExt.CreateGetterSetter``2(Expression{Func{``0,``1}})
  commentId: M:SearchAThing.UtilExt.CreateGetterSetter``2(Expression{Func{``0,``1}})
  id: CreateGetterSetter``2(Expression{Func{``0,``1}})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: CreateGetterSetter<T, V>(Expression<Func<T, V>>)
  nameWithType: UtilExt.CreateGetterSetter<T, V>(Expression<Func<T, V>>)
  fullName: SearchAThing.UtilExt.CreateGetterSetter<T, V>(Expression<Func<T, V>>)
  type: Method
  source:
    id: CreateGetterSetter
    path: Z:\netcore-util\netcore-util\Expression.cs
    startLine: 100
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncreate getter (func) and setter (action) from given lambda expr\n"
  example: []
  syntax:
    content: public static (Func<T, V> getter, Action<T, V> setter) CreateGetterSetter<T, V>(this Expression<Func<T, V>> expr)
    parameters:
    - id: expr
      type: Expression{Func{{T},{V}}}
    typeParameters:
    - id: T
    - id: V
    return:
      type: System.ValueTuple{Func{{T},{V}},Action{{T},{V}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateGetterSetter(Of T, V)(expr As Expression(Of Func(Of T, V))) As(getter As Func(Of T, V), setter As Action(Of T, V))
  overload: SearchAThing.UtilExt.CreateGetterSetter*
  nameWithType.vb: UtilExt.CreateGetterSetter(Of T, V)(Expression(Of Func(Of T, V)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.CreateGetterSetter(Of T, V)(Expression(Of Func(Of T, V)))
  name.vb: CreateGetterSetter(Of T, V)(Expression(Of Func(Of T, V)))
- uid: SearchAThing.UtilExt.Distinct``2(IEnumerable{``0},Func{``0,``1})
  commentId: M:SearchAThing.UtilExt.Distinct``2(IEnumerable{``0},Func{``0,``1})
  id: Distinct``2(IEnumerable{``0},Func{``0,``1})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: UtilExt.Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: SearchAThing.UtilExt.Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  type: Method
  source:
    id: Distinct
    path: Z:\netcore-util\netcore-util\IEnumerable.cs
    startLine: 13
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ndistinct with lambda\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Distinct<T, TKey>(this IEnumerable<T> lst, Func<T, TKey> keySelector)
    parameters:
    - id: lst
      type: IEnumerable{{T}}
    - id: keySelector
      type: Func{{T},{TKey}}
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of T, TKey)(lst As IEnumerable(Of T), keySelector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: SearchAThing.UtilExt.Distinct*
  nameWithType.vb: UtilExt.Distinct(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.Distinct(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  name.vb: Distinct(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: SearchAThing.UtilExt.WithIndex``1(IEnumerable{``0})
  commentId: M:SearchAThing.UtilExt.WithIndex``1(IEnumerable{``0})
  id: WithIndex``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: WithIndex<T>(IEnumerable<T>)
  nameWithType: UtilExt.WithIndex<T>(IEnumerable<T>)
  fullName: SearchAThing.UtilExt.WithIndex<T>(IEnumerable<T>)
  type: Method
  source:
    id: WithIndex
    path: Z:\netcore-util\netcore-util\IEnumerable.cs
    startLine: 21
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nenumerable extension to enumerate itself into an (item, idx) set\n"
  example: []
  syntax:
    content: public static IEnumerable<(T item, int idx)> WithIndex<T>(this IEnumerable<T> en)
    parameters:
    - id: en
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.ValueTuple{{T},System.Int32}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithIndex(Of T)(en As IEnumerable(Of T)) As IEnumerable(Of(item As T, idx As Integer))
  overload: SearchAThing.UtilExt.WithIndex*
  nameWithType.vb: UtilExt.WithIndex(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.WithIndex(Of T)(IEnumerable(Of T))
  name.vb: WithIndex(Of T)(IEnumerable(Of T))
- uid: SearchAThing.UtilExt.WithIndexIsLast``1(IEnumerable{``0})
  commentId: M:SearchAThing.UtilExt.WithIndexIsLast``1(IEnumerable{``0})
  id: WithIndexIsLast``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: WithIndexIsLast<T>(IEnumerable<T>)
  nameWithType: UtilExt.WithIndexIsLast<T>(IEnumerable<T>)
  fullName: SearchAThing.UtilExt.WithIndexIsLast<T>(IEnumerable<T>)
  type: Method
  source:
    id: WithIndexIsLast
    path: Z:\netcore-util\netcore-util\IEnumerable.cs
    startLine: 27
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nenumerable extension to enumerate itself into an (item, idx, isLast) set\n"
  example: []
  syntax:
    content: public static IEnumerable<(T item, int idx, bool isLast)> WithIndexIsLast<T>(this IEnumerable<T> en)
    parameters:
    - id: en
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.ValueTuple{{T},System.Int32,System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithIndexIsLast(Of T)(en As IEnumerable(Of T)) As IEnumerable(Of(item As T, idx As Integer, isLast As Boolean))
  overload: SearchAThing.UtilExt.WithIndexIsLast*
  nameWithType.vb: UtilExt.WithIndexIsLast(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.WithIndexIsLast(Of T)(IEnumerable(Of T))
  name.vb: WithIndexIsLast(Of T)(IEnumerable(Of T))
- uid: SearchAThing.UtilExt.EqualsAutoTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.EqualsAutoTol(System.Double,System.Double,System.Double)
  id: EqualsAutoTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: EqualsAutoTol(Double, Double, Double)
  nameWithType: UtilExt.EqualsAutoTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.EqualsAutoTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: EqualsAutoTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 14
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nReturns true if two numbers are equals using a default tolerance of 1e-6 about the smaller one.\n"
  example: []
  syntax:
    content: public static bool EqualsAutoTol(this double x, double y, double precision = 1E-06)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: precision
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsAutoTol(x As Double, y As Double, precision As Double = 1E-06) As Boolean
  overload: SearchAThing.UtilExt.EqualsAutoTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.MRound(System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.MRound(System.Double,System.Double)
  id: MRound(System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: MRound(Double, Double)
  nameWithType: UtilExt.MRound(Double, Double)
  fullName: SearchAThing.UtilExt.MRound(System.Double, System.Double)
  type: Method
  source:
    id: MRound
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 22
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nRound the given value using the multiple basis\n"
  example: []
  syntax:
    content: public static double MRound(this double value, double multiple)
    parameters:
    - id: value
      type: System.Double
    - id: multiple
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MRound(value As Double, multiple As Double) As Double
  overload: SearchAThing.UtilExt.MRound*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.MRound(System.Nullable{System.Double},System.Double)
  commentId: M:SearchAThing.UtilExt.MRound(System.Nullable{System.Double},System.Double)
  id: MRound(System.Nullable{System.Double},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: MRound(Nullable<Double>, Double)
  nameWithType: UtilExt.MRound(Nullable<Double>, Double)
  fullName: SearchAThing.UtilExt.MRound(System.Nullable<System.Double>, System.Double)
  type: Method
  source:
    id: MRound
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 36
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nRound the given value using the multiple basis\nif null return null\n"
  example: []
  syntax:
    content: public static double? MRound(this double? value, double multiple)
    parameters:
    - id: value
      type: System.Nullable{System.Double}
    - id: multiple
      type: System.Double
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MRound(value As Double?, multiple As Double) As Double?
  overload: SearchAThing.UtilExt.MRound*
  nameWithType.vb: UtilExt.MRound(Nullable(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.MRound(System.Nullable(Of System.Double), System.Double)
  name.vb: MRound(Nullable(Of Double), Double)
- uid: SearchAThing.UtilExt.MRound(System.Double,System.Nullable{System.Double})
  commentId: M:SearchAThing.UtilExt.MRound(System.Double,System.Nullable{System.Double})
  id: MRound(System.Double,System.Nullable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: MRound(Double, Nullable<Double>)
  nameWithType: UtilExt.MRound(Double, Nullable<Double>)
  fullName: SearchAThing.UtilExt.MRound(System.Double, System.Nullable<System.Double>)
  type: Method
  source:
    id: MRound
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 47
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nRound the given value using the multiple basis\n"
  example: []
  syntax:
    content: public static double MRound(this double value, double? multiple)
    parameters:
    - id: value
      type: System.Double
    - id: multiple
      type: System.Nullable{System.Double}
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MRound(value As Double, multiple As Double?) As Double
  overload: SearchAThing.UtilExt.MRound*
  nameWithType.vb: UtilExt.MRound(Double, Nullable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.MRound(System.Double, System.Nullable(Of System.Double))
  name.vb: MRound(Double, Nullable(Of Double))
- uid: SearchAThing.UtilExt.ToDeg(System.Double)
  commentId: M:SearchAThing.UtilExt.ToDeg(System.Double)
  id: ToDeg(System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ToDeg(Double)
  nameWithType: UtilExt.ToDeg(Double)
  fullName: SearchAThing.UtilExt.ToDeg(System.Double)
  type: Method
  source:
    id: ToDeg
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 58
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nconvert given angle(rad) to degree\n"
  example: []
  syntax:
    content: public static double ToDeg(this double angleRad)
    parameters:
    - id: angleRad
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDeg(angleRad As Double) As Double
  overload: SearchAThing.UtilExt.ToDeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.ToRad(System.Double)
  commentId: M:SearchAThing.UtilExt.ToRad(System.Double)
  id: ToRad(System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ToRad(Double)
  nameWithType: UtilExt.ToRad(Double)
  fullName: SearchAThing.UtilExt.ToRad(System.Double)
  type: Method
  source:
    id: ToRad
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 66
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nconvert given angle(grad) to radians\n"
  example: []
  syntax:
    content: public static double ToRad(this double angleGrad)
    parameters:
    - id: angleGrad
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRad(angleGrad As Double) As Double
  overload: SearchAThing.UtilExt.ToRad*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Stringify(System.Double,System.Int32)
  commentId: M:SearchAThing.UtilExt.Stringify(System.Double,System.Int32)
  id: Stringify(System.Double,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Stringify(Double, Int32)
  nameWithType: UtilExt.Stringify(Double, Int32)
  fullName: SearchAThing.UtilExt.Stringify(System.Double, System.Int32)
  type: Method
  source:
    id: Stringify
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 73
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static string Stringify(this double x, int dec)
    parameters:
    - id: x
      type: System.Double
    - id: dec
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stringify(x As Double, dec As Integer) As String
  overload: SearchAThing.UtilExt.Stringify*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Magnitude(System.Double)
  commentId: M:SearchAThing.UtilExt.Magnitude(System.Double)
  id: Magnitude(System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Magnitude(Double)
  nameWithType: UtilExt.Magnitude(Double)
  fullName: SearchAThing.UtilExt.Magnitude(System.Double)
  type: Method
  source:
    id: Magnitude
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 82
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nMagnitude of given number. (eg. 190 -> 1.9e2 -> 2)\n(eg. 0.0034 -> 3.4e-3 -> -3)\n"
  example: []
  syntax:
    content: public static int Magnitude(this double value)
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Magnitude(value As Double) As Integer
  overload: SearchAThing.UtilExt.Magnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.PercentDifference(System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.PercentDifference(System.Double,System.Double)
  id: PercentDifference(System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: PercentDifference(Double, Double)
  nameWithType: UtilExt.PercentDifference(Double, Double)
  fullName: SearchAThing.UtilExt.PercentDifference(System.Double, System.Double)
  type: Method
  source:
    id: PercentDifference
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 104
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nMeasure percent difference between given two numbers;\nreturn double.NaN if only one of two numbers are 0;\n0 if both two given numbers are 0.\n\nGiven f = PercentDifference(x, y)\nm = Min(x, y)\nM = Max(x, y)        \na = Min(Abs(x), Abs(y))\n\nreturned value f satisfy follow condition        \nM(m, a, f) = m + a * f\n"
  example: []
  syntax:
    content: public static double PercentDifference(this double x, double y)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PercentDifference(x As Double, y As Double) As Double
  overload: SearchAThing.UtilExt.PercentDifference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.InvDoubleParse(System.String)
  commentId: M:SearchAThing.UtilExt.InvDoubleParse(System.String)
  id: InvDoubleParse(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: InvDoubleParse(String)
  nameWithType: UtilExt.InvDoubleParse(String)
  fullName: SearchAThing.UtilExt.InvDoubleParse(System.String)
  type: Method
  source:
    id: InvDoubleParse
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 121
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nInvariant culture double parse\n"
  example: []
  syntax:
    content: public static double InvDoubleParse(this string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvDoubleParse(str As String) As Double
  overload: SearchAThing.UtilExt.InvDoubleParse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.SmartDoubleParse(System.String)
  commentId: M:SearchAThing.UtilExt.SmartDoubleParse(System.String)
  id: SmartDoubleParse(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: SmartDoubleParse(String)
  nameWithType: UtilExt.SmartDoubleParse(String)
  fullName: SearchAThing.UtilExt.SmartDoubleParse(System.String)
  type: Method
  source:
    id: SmartDoubleParse
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 131
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nparse string that represent number without knowing current culture\nso that it can parse &quot;1.2&quot; or &quot;1,2&quot; equivalent to 1.2\nit will throw error more than one dot or comma found\n"
  example: []
  syntax:
    content: public static double SmartDoubleParse(this string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SmartDoubleParse(str As String) As Double
  overload: SearchAThing.UtilExt.SmartDoubleParse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Mean(IEnumerable{System.Double})
  commentId: M:SearchAThing.UtilExt.Mean(IEnumerable{System.Double})
  id: Mean(IEnumerable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Mean(IEnumerable<Double>)
  nameWithType: UtilExt.Mean(IEnumerable<Double>)
  fullName: SearchAThing.UtilExt.Mean(IEnumerable<System.Double>)
  type: Method
  source:
    id: Mean
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 151
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nMean of given numbers\n"
  example: []
  syntax:
    content: public static double Mean(this IEnumerable<double> set)
    parameters:
    - id: set
      type: IEnumerable{System.Double}
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Mean(set As IEnumerable(Of Double)) As Double
  overload: SearchAThing.UtilExt.Mean*
  nameWithType.vb: UtilExt.Mean(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.Mean(IEnumerable(Of System.Double))
  name.vb: Mean(IEnumerable(Of Double))
- uid: SearchAThing.UtilExt.ToString(System.Double,System.Int32)
  commentId: M:SearchAThing.UtilExt.ToString(System.Double,System.Int32)
  id: ToString(System.Double,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ToString(Double, Int32)
  nameWithType: UtilExt.ToString(Double, Int32)
  fullName: SearchAThing.UtilExt.ToString(System.Double, System.Int32)
  type: Method
  source:
    id: ToString
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 162
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nformat number so that show given significant digits. (eg. 2.03 with significantDigits=4 create &quot;2.0300&quot;)\n"
  example: []
  syntax:
    content: public static string ToString(this double d, int significantDigits)
    parameters:
    - id: d
      type: System.Double
    - id: significantDigits
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToString(d As Double, significantDigits As Integer) As String
  overload: SearchAThing.UtilExt.ToString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.EqualsTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.EqualsTol(System.Double,System.Double,System.Double)
  id: EqualsTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: EqualsTol(Double, Double, Double)
  nameWithType: UtilExt.EqualsTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.EqualsTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 168
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static bool EqualsTol(this double x, double tol, double y)
    parameters:
    - id: x
      type: System.Double
    - id: tol
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTol(x As Double, tol As Double, y As Double) As Boolean
  overload: SearchAThing.UtilExt.EqualsTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.GreatThanTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.GreatThanTol(System.Double,System.Double,System.Double)
  id: GreatThanTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GreatThanTol(Double, Double, Double)
  nameWithType: UtilExt.GreatThanTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.GreatThanTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: GreatThanTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 173
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static bool GreatThanTol(this double x, double tol, double y)
    parameters:
    - id: x
      type: System.Double
    - id: tol
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GreatThanTol(x As Double, tol As Double, y As Double) As Boolean
  overload: SearchAThing.UtilExt.GreatThanTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.GreatThanOrEqualsTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.GreatThanOrEqualsTol(System.Double,System.Double,System.Double)
  id: GreatThanOrEqualsTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GreatThanOrEqualsTol(Double, Double, Double)
  nameWithType: UtilExt.GreatThanOrEqualsTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.GreatThanOrEqualsTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: GreatThanOrEqualsTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 178
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static bool GreatThanOrEqualsTol(this double x, double tol, double y)
    parameters:
    - id: x
      type: System.Double
    - id: tol
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GreatThanOrEqualsTol(x As Double, tol As Double, y As Double) As Boolean
  overload: SearchAThing.UtilExt.GreatThanOrEqualsTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.LessThanTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.LessThanTol(System.Double,System.Double,System.Double)
  id: LessThanTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: LessThanTol(Double, Double, Double)
  nameWithType: UtilExt.LessThanTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.LessThanTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: LessThanTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 183
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static bool LessThanTol(this double x, double tol, double y)
    parameters:
    - id: x
      type: System.Double
    - id: tol
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LessThanTol(x As Double, tol As Double, y As Double) As Boolean
  overload: SearchAThing.UtilExt.LessThanTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.LessThanOrEqualsTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.LessThanOrEqualsTol(System.Double,System.Double,System.Double)
  id: LessThanOrEqualsTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: LessThanOrEqualsTol(Double, Double, Double)
  nameWithType: UtilExt.LessThanOrEqualsTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.LessThanOrEqualsTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: LessThanOrEqualsTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 188
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static bool LessThanOrEqualsTol(this double x, double tol, double y)
    parameters:
    - id: x
      type: System.Double
    - id: tol
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LessThanOrEqualsTol(x As Double, tol As Double, y As Double) As Boolean
  overload: SearchAThing.UtilExt.LessThanOrEqualsTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.CompareTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.UtilExt.CompareTol(System.Double,System.Double,System.Double)
  id: CompareTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: CompareTol(Double, Double, Double)
  nameWithType: UtilExt.CompareTol(Double, Double, Double)
  fullName: SearchAThing.UtilExt.CompareTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: CompareTol
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 193
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static int CompareTol(this double x, double tol, double y)
    parameters:
    - id: x
      type: System.Double
    - id: tol
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CompareTol(x As Double, tol As Double, y As Double) As Integer
  overload: SearchAThing.UtilExt.CompareTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.IsInRange(System.Double,System.Double,System.String)
  commentId: M:SearchAThing.UtilExt.IsInRange(System.Double,System.Double,System.String)
  id: IsInRange(System.Double,System.Double,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: IsInRange(Double, Double, String)
  nameWithType: UtilExt.IsInRange(Double, Double, String)
  fullName: SearchAThing.UtilExt.IsInRange(System.Double, System.Double, System.String)
  type: Method
  source:
    id: IsInRange
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 207
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\neval if a number fits in given range\neg.\n- &quot;[0, 10)&quot; are numbers from 0 (included) to 10 (excluded)\n- &quot;[10, 20]&quot; are numbers from 10 (included) to 20 (included)\n- &quot;(30,)&quot; are numbers from 30 (excluded) to +infinity\n"
  example: []
  syntax:
    content: public static bool IsInRange(this double nr, double tol, string range)
    parameters:
    - id: nr
      type: System.Double
    - id: tol
      type: System.Double
    - id: range
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInRange(nr As Double, tol As Double, range As String) As Boolean
  overload: SearchAThing.UtilExt.IsInRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Sign(System.Int32)
  commentId: M:SearchAThing.UtilExt.Sign(System.Int32)
  id: Sign(System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Sign(Int32)
  nameWithType: UtilExt.Sign(Int32)
  fullName: SearchAThing.UtilExt.Sign(System.Int32)
  type: Method
  source:
    id: Sign
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 243
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturns 1.0 if n>=0\n-1 otherwise\n"
  example: []
  syntax:
    content: public static double Sign(this int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sign(n As Integer) As Double
  overload: SearchAThing.UtilExt.Sign*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Sign(System.Double)
  commentId: M:SearchAThing.UtilExt.Sign(System.Double)
  id: Sign(System.Double)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Sign(Double)
  nameWithType: UtilExt.Sign(Double)
  fullName: SearchAThing.UtilExt.Sign(System.Double)
  type: Method
  source:
    id: Sign
    path: Z:\netcore-util\netcore-util\Number.cs
    startLine: 253
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturns 1.0 if n>=0\n-1 otherwise\n"
  example: []
  syntax:
    content: public static double Sign(this double n)
    parameters:
    - id: n
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sign(n As Double) As Double
  overload: SearchAThing.UtilExt.Sign*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  commentId: M:SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  id: Eval``2(``0,Func{``0,``1})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Eval<T, U>(T, Func<T, U>)
  nameWithType: UtilExt.Eval<T, U>(T, Func<T, U>)
  fullName: SearchAThing.UtilExt.Eval<T, U>(T, Func<T, U>)
  type: Method
  source:
    id: Eval
    path: Z:\netcore-util\netcore-util\Object.cs
    startLine: 23
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nuseful to decide action checking for nullity when object retrieval\ncan consume cpu;\neg. myobj.Eval((x) => (x == null) ? &quot;&quot; : x)\n"
  example: []
  syntax:
    content: public static U Eval<T, U>(this T obj, Func<T, U> fn)
    parameters:
    - id: obj
      type: '{T}'
    - id: fn
      type: Func{{T},{U}}
    typeParameters:
    - id: T
    - id: U
    return:
      type: '{U}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Eval(Of T, U)(obj As T, fn As Func(Of T, U)) As U
  overload: SearchAThing.UtilExt.Eval*
  nameWithType.vb: UtilExt.Eval(Of T, U)(T, Func(Of T, U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.Eval(Of T, U)(T, Func(Of T, U))
  name.vb: Eval(Of T, U)(T, Func(Of T, U))
- uid: SearchAThing.UtilExt.Sort``2(ObservableCollection{``0},Func{``0,``1},System.Boolean)
  commentId: M:SearchAThing.UtilExt.Sort``2(ObservableCollection{``0},Func{``0,``1},System.Boolean)
  id: Sort``2(ObservableCollection{``0},Func{``0,``1},System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Sort<TSource, TKey>(ObservableCollection<TSource>, Func<TSource, TKey>, Boolean)
  nameWithType: UtilExt.Sort<TSource, TKey>(ObservableCollection<TSource>, Func<TSource, TKey>, Boolean)
  fullName: SearchAThing.UtilExt.Sort<TSource, TKey>(ObservableCollection<TSource>, Func<TSource, TKey>, System.Boolean)
  type: Method
  source:
    id: Sort
    path: Z:\netcore-util\netcore-util\ObservableCollection.cs
    startLine: 17
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nsort obc\n"
  example: []
  syntax:
    content: public static void Sort<TSource, TKey>(this ObservableCollection<TSource> obc, Func<TSource, TKey> keySelector, bool descending = false)
    parameters:
    - id: obc
      type: ObservableCollection{{TSource}}
      description: observable collection to sort
    - id: keySelector
      type: Func{{TSource},{TKey}}
    - id: descending
      type: System.Boolean
      description: if true then sort descending
    typeParameters:
    - id: TSource
    - id: TKey
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Sort(Of TSource, TKey)(obc As ObservableCollection(Of TSource), keySelector As Func(Of TSource, TKey), descending As Boolean = False)
  overload: SearchAThing.UtilExt.Sort*
  nameWithType.vb: UtilExt.Sort(Of TSource, TKey)(ObservableCollection(Of TSource), Func(Of TSource, TKey), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.Sort(Of TSource, TKey)(ObservableCollection(Of TSource), Func(Of TSource, TKey), System.Boolean)
  name.vb: Sort(Of TSource, TKey)(ObservableCollection(Of TSource), Func(Of TSource, TKey), Boolean)
- uid: SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  commentId: M:SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  id: Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Assign<T>(T, T, Func<PropertyInfo, Boolean>)
  nameWithType: UtilExt.Assign<T>(T, T, Func<PropertyInfo, Boolean>)
  fullName: SearchAThing.UtilExt.Assign<T>(T, T, Func<PropertyInfo, System.Boolean>)
  type: Method
  source:
    id: Assign
    path: Z:\netcore-util\netcore-util\Reflection.cs
    startLine: 13
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nassign public properties of src to dst object\n"
  example: []
  syntax:
    content: public static void Assign<T>(this T src, T dst, Func<PropertyInfo, bool> exclude = null)
    parameters:
    - id: src
      type: '{T}'
    - id: dst
      type: '{T}'
    - id: exclude
      type: Func{PropertyInfo,System.Boolean}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Assign(Of T)(src As T, dst As T, exclude As Func(Of PropertyInfo, Boolean) = Nothing)
  overload: SearchAThing.UtilExt.Assign*
  nameWithType.vb: UtilExt.Assign(Of T)(T, T, Func(Of PropertyInfo, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.Assign(Of T)(T, T, Func(Of PropertyInfo, System.Boolean))
  name.vb: Assign(Of T)(T, T, Func(Of PropertyInfo, Boolean))
- uid: SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  commentId: M:SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  id: CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: CopyFrom<T>(T, T, Func<PropertyInfo, Boolean>)
  nameWithType: UtilExt.CopyFrom<T>(T, T, Func<PropertyInfo, Boolean>)
  fullName: SearchAThing.UtilExt.CopyFrom<T>(T, T, Func<PropertyInfo, System.Boolean>)
  type: Method
  source:
    id: CopyFrom
    path: Z:\netcore-util\netcore-util\Reflection.cs
    startLine: 26
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncopy properties from other object ; if match functor specified it copies only matched properties\n"
  example: []
  syntax:
    content: public static T CopyFrom<T>(this T obj, T other, Func<PropertyInfo, bool> match = null)
    parameters:
    - id: obj
      type: '{T}'
    - id: other
      type: '{T}'
    - id: match
      type: Func{PropertyInfo,System.Boolean}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyFrom(Of T)(obj As T, other As T, match As Func(Of PropertyInfo, Boolean) = Nothing) As T
  overload: SearchAThing.UtilExt.CopyFrom*
  nameWithType.vb: UtilExt.CopyFrom(Of T)(T, T, Func(Of PropertyInfo, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.CopyFrom(Of T)(T, T, Func(Of PropertyInfo, System.Boolean))
  name.vb: CopyFrom(Of T)(T, T, Func(Of PropertyInfo, Boolean))
- uid: SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  commentId: M:SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  id: CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: CopyFromCustom<T>(T, T, UtilExt.CopyFromCustomDelegate)
  nameWithType: UtilExt.CopyFromCustom<T>(T, T, UtilExt.CopyFromCustomDelegate)
  fullName: SearchAThing.UtilExt.CopyFromCustom<T>(T, T, SearchAThing.UtilExt.CopyFromCustomDelegate)
  type: Method
  source:
    id: CopyFromCustom
    path: Z:\netcore-util\netcore-util\Reflection.cs
    startLine: 42
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncopy properties from other object ; a custom non null delegate function can be passed to specify\nif include a property and if to assign a custom value ( useful for complex, array types )\n"
  example: []
  syntax:
    content: public static T CopyFromCustom<T>(this T obj, T other, UtilExt.CopyFromCustomDelegate custom = null)
    parameters:
    - id: obj
      type: '{T}'
    - id: other
      type: '{T}'
    - id: custom
      type: SearchAThing.UtilExt.CopyFromCustomDelegate
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyFromCustom(Of T)(obj As T, other As T, custom As UtilExt.CopyFromCustomDelegate = Nothing) As T
  overload: SearchAThing.UtilExt.CopyFromCustom*
  nameWithType.vb: UtilExt.CopyFromCustom(Of T)(T, T, UtilExt.CopyFromCustomDelegate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.CopyFromCustom(Of T)(T, T, SearchAThing.UtilExt.CopyFromCustomDelegate)
  name.vb: CopyFromCustom(Of T)(T, T, UtilExt.CopyFromCustomDelegate)
- uid: SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  commentId: M:SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  id: CopyFromExclude``1(``0,``0,System.String[])
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: CopyFromExclude<T>(T, T, String[])
  nameWithType: UtilExt.CopyFromExclude<T>(T, T, String[])
  fullName: SearchAThing.UtilExt.CopyFromExclude<T>(T, T, System.String[])
  type: Method
  source:
    id: CopyFromExclude
    path: Z:\netcore-util\netcore-util\Reflection.cs
    startLine: 68
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncopy properties from other object excluding those with given names\n"
  example: []
  syntax:
    content: public static T CopyFromExclude<T>(this T obj, T other, params string[] exclude_names)
    parameters:
    - id: obj
      type: '{T}'
    - id: other
      type: '{T}'
    - id: exclude_names
      type: System.String[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyFromExclude(Of T)(obj As T, other As T, ParamArray exclude_names As String()) As T
  overload: SearchAThing.UtilExt.CopyFromExclude*
  nameWithType.vb: UtilExt.CopyFromExclude(Of T)(T, T, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.CopyFromExclude(Of T)(T, T, System.String())
  name.vb: CopyFromExclude(Of T)(T, T, String())
- uid: SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  commentId: M:SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  id: CopyFromInclude``1(``0,``0,System.String[])
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: CopyFromInclude<T>(T, T, String[])
  nameWithType: UtilExt.CopyFromInclude<T>(T, T, String[])
  fullName: SearchAThing.UtilExt.CopyFromInclude<T>(T, T, System.String[])
  type: Method
  source:
    id: CopyFromInclude
    path: Z:\netcore-util\netcore-util\Reflection.cs
    startLine: 76
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncopy properties from other object including only those with given names\n"
  example: []
  syntax:
    content: public static T CopyFromInclude<T>(this T obj, T other, params string[] include_names)
    parameters:
    - id: obj
      type: '{T}'
    - id: other
      type: '{T}'
    - id: include_names
      type: System.String[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyFromInclude(Of T)(obj As T, other As T, ParamArray include_names As String()) As T
  overload: SearchAThing.UtilExt.CopyFromInclude*
  nameWithType.vb: UtilExt.CopyFromInclude(Of T)(T, T, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.CopyFromInclude(Of T)(T, T, System.String())
  name.vb: CopyFromInclude(Of T)(T, T, String())
- uid: SearchAThing.UtilExt.Align(System.String,System.Int32,SearchAThing.ColumnAlignment)
  commentId: M:SearchAThing.UtilExt.Align(System.String,System.Int32,SearchAThing.ColumnAlignment)
  id: Align(System.String,System.Int32,SearchAThing.ColumnAlignment)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Align(String, Int32, ColumnAlignment)
  nameWithType: UtilExt.Align(String, Int32, ColumnAlignment)
  fullName: SearchAThing.UtilExt.Align(System.String, System.Int32, SearchAThing.ColumnAlignment)
  type: Method
  source:
    id: Align
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 23
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nalign given string into given size with alignment specified.\nresulting string will fit into given size with spaces or truncated if not enough for given size vs str length\n"
  example: []
  syntax:
    content: public static string Align(this string str, int size, ColumnAlignment align = ColumnAlignment.left)
    parameters:
    - id: str
      type: System.String
    - id: size
      type: System.Int32
    - id: align
      type: SearchAThing.ColumnAlignment
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Align(str As String, size As Integer, align As ColumnAlignment = ColumnAlignment.left) As String
  overload: SearchAThing.UtilExt.Align*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.TableFormat(IEnumerable{IEnumerable{System.String}},IEnumerable{System.String},IEnumerable{SearchAThing.ColumnAlignment},System.Int32)
  commentId: M:SearchAThing.UtilExt.TableFormat(IEnumerable{IEnumerable{System.String}},IEnumerable{System.String},IEnumerable{SearchAThing.ColumnAlignment},System.Int32)
  id: TableFormat(IEnumerable{IEnumerable{System.String}},IEnumerable{System.String},IEnumerable{SearchAThing.ColumnAlignment},System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: TableFormat(IEnumerable<IEnumerable<String>>, IEnumerable<String>, IEnumerable<ColumnAlignment>, Int32)
  nameWithType: UtilExt.TableFormat(IEnumerable<IEnumerable<String>>, IEnumerable<String>, IEnumerable<ColumnAlignment>, Int32)
  fullName: SearchAThing.UtilExt.TableFormat(IEnumerable<IEnumerable<System.String>>, IEnumerable<System.String>, IEnumerable<SearchAThing.ColumnAlignment>, System.Int32)
  type: Method
  source:
    id: TableFormat
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 62
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nformats given rows into a table aligning by columns.\noptional column spacing and alignment can be specified.\n"
  example: []
  syntax:
    content: public static string TableFormat(this IEnumerable<IEnumerable<string>> src, IEnumerable<string> headers = null, IEnumerable<ColumnAlignment> aligns = null, int columnSpacing = 3)
    parameters:
    - id: src
      type: IEnumerable{IEnumerable{System.String}}
    - id: headers
      type: IEnumerable{System.String}
    - id: aligns
      type: IEnumerable{SearchAThing.ColumnAlignment}
    - id: columnSpacing
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TableFormat(src As IEnumerable(Of IEnumerable(Of String)), headers As IEnumerable(Of String) = Nothing, aligns As IEnumerable(Of ColumnAlignment) = Nothing, columnSpacing As Integer = 3) As String
  overload: SearchAThing.UtilExt.TableFormat*
  nameWithType.vb: UtilExt.TableFormat(IEnumerable(Of IEnumerable(Of String)), IEnumerable(Of String), IEnumerable(Of ColumnAlignment), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.TableFormat(IEnumerable(Of IEnumerable(Of System.String)), IEnumerable(Of System.String), IEnumerable(Of SearchAThing.ColumnAlignment), System.Int32)
  name.vb: TableFormat(IEnumerable(Of IEnumerable(Of String)), IEnumerable(Of String), IEnumerable(Of ColumnAlignment), Int32)
- uid: SearchAThing.UtilExt.StripBegin(System.String,System.Char,System.Boolean)
  commentId: M:SearchAThing.UtilExt.StripBegin(System.String,System.Char,System.Boolean)
  id: StripBegin(System.String,System.Char,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: StripBegin(String, Char, Boolean)
  nameWithType: UtilExt.StripBegin(String, Char, Boolean)
  fullName: SearchAThing.UtilExt.StripBegin(System.String, System.Char, System.Boolean)
  type: Method
  source:
    id: StripBegin
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 133
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nReturns the given string stripped from the given part if exists at beginning.\n"
  example: []
  syntax:
    content: public static string StripBegin(this string str, char c, bool ignoreCase = false)
    parameters:
    - id: str
      type: System.String
    - id: c
      type: System.Char
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripBegin(str As String, c As Char, ignoreCase As Boolean = False) As String
  overload: SearchAThing.UtilExt.StripBegin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.StripBegin(System.String,System.String,System.Boolean)
  commentId: M:SearchAThing.UtilExt.StripBegin(System.String,System.String,System.Boolean)
  id: StripBegin(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: StripBegin(String, String, Boolean)
  nameWithType: UtilExt.StripBegin(String, String, Boolean)
  fullName: SearchAThing.UtilExt.StripBegin(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: StripBegin
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 144
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nReturns the given string stripped from the given part if exists at beginning.\n"
  example: []
  syntax:
    content: public static string StripBegin(this string str, string partToStrip, bool ignoreCase = false)
    parameters:
    - id: str
      type: System.String
    - id: partToStrip
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripBegin(str As String, partToStrip As String, ignoreCase As Boolean = False) As String
  overload: SearchAThing.UtilExt.StripBegin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.StripEnd(System.String,System.Char,System.Boolean)
  commentId: M:SearchAThing.UtilExt.StripEnd(System.String,System.Char,System.Boolean)
  id: StripEnd(System.String,System.Char,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: StripEnd(String, Char, Boolean)
  nameWithType: UtilExt.StripEnd(String, Char, Boolean)
  fullName: SearchAThing.UtilExt.StripEnd(System.String, System.Char, System.Boolean)
  type: Method
  source:
    id: StripEnd
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 158
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nReturns the given string stripped from the given part if exists at end.\n"
  example: []
  syntax:
    content: public static string StripEnd(this string str, char c, bool ignoreCase = false)
    parameters:
    - id: str
      type: System.String
    - id: c
      type: System.Char
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripEnd(str As String, c As Char, ignoreCase As Boolean = False) As String
  overload: SearchAThing.UtilExt.StripEnd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.StripEnd(System.String,System.String,System.Boolean)
  commentId: M:SearchAThing.UtilExt.StripEnd(System.String,System.String,System.Boolean)
  id: StripEnd(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: StripEnd(String, String, Boolean)
  nameWithType: UtilExt.StripEnd(String, String, Boolean)
  fullName: SearchAThing.UtilExt.StripEnd(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: StripEnd
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 169
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nReturns the given string stripped from the given part if exists at end.\n"
  example: []
  syntax:
    content: public static string StripEnd(this string str, string partToStrip, bool ignoreCase = false)
    parameters:
    - id: str
      type: System.String
    - id: partToStrip
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripEnd(str As String, partToStrip As String, ignoreCase As Boolean = False) As String
  overload: SearchAThing.UtilExt.StripEnd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.NextLine(System.String,System.Int32@)
  commentId: M:SearchAThing.UtilExt.NextLine(System.String,System.Int32@)
  id: NextLine(System.String,System.Int32@)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: NextLine(String, ref Int32)
  nameWithType: UtilExt.NextLine(String, ref Int32)
  fullName: SearchAThing.UtilExt.NextLine(System.String, ref System.Int32)
  type: Method
  source:
    id: NextLine
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 180
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nextract line from string buffer\n"
  example: []
  syntax:
    content: public static string NextLine(this string txt, ref int off)
    parameters:
    - id: txt
      type: System.String
    - id: off
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NextLine(txt As String, ByRef off As Integer) As String
  overload: SearchAThing.UtilExt.NextLine*
  nameWithType.vb: UtilExt.NextLine(String, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.NextLine(System.String, ByRef System.Int32)
  name.vb: NextLine(String, ByRef Int32)
- uid: SearchAThing.UtilExt.Lines(System.String,System.Boolean)
  commentId: M:SearchAThing.UtilExt.Lines(System.String,System.Boolean)
  id: Lines(System.String,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Lines(String, Boolean)
  nameWithType: UtilExt.Lines(String, Boolean)
  fullName: SearchAThing.UtilExt.Lines(System.String, System.Boolean)
  type: Method
  source:
    id: Lines
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 190
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nSmart line splitter that split a text into lines whatever unix or windows line ending style.\nBy default its remove empty lines.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> Lines(this string txt, bool removeEmptyLines = true)
    parameters:
    - id: txt
      type: System.String
    - id: removeEmptyLines
      type: System.Boolean
      description: If true remove empty lines.
    return:
      type: IEnumerable{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lines(txt As String, removeEmptyLines As Boolean = True) As IEnumerable(Of String)
  overload: SearchAThing.UtilExt.Lines*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.HumanReadable(System.Int64,System.Boolean,System.Int64,System.Int32)
  commentId: M:SearchAThing.UtilExt.HumanReadable(System.Int64,System.Boolean,System.Int64,System.Int32)
  id: HumanReadable(System.Int64,System.Boolean,System.Int64,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: HumanReadable(Int64, Boolean, Int64, Int32)
  nameWithType: UtilExt.HumanReadable(Int64, Boolean, Int64, Int32)
  fullName: SearchAThing.UtilExt.HumanReadable(System.Int64, System.Boolean, System.Int64, System.Int32)
  type: Method
  source:
    id: HumanReadable
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 204
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nReturns a human readable bytes length. (eg. 1000, 1K, 1M, 1G, 1T)\nif onlyBytesUnit is set to false it will enable representation through K, M, G, T suffixes\n"
  example: []
  syntax:
    content: public static string HumanReadable(this long bytes, bool onlyBytesUnit = true, long bytesMultiple = 1L, int decimals = 1)
    parameters:
    - id: bytes
      type: System.Int64
    - id: onlyBytesUnit
      type: System.Boolean
    - id: bytesMultiple
      type: System.Int64
    - id: decimals
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HumanReadable(bytes As Long, onlyBytesUnit As Boolean = True, bytesMultiple As Long = 1L, decimals As Integer = 1) As String
  overload: SearchAThing.UtilExt.HumanReadable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Repeat(System.String,System.Int32)
  commentId: M:SearchAThing.UtilExt.Repeat(System.String,System.Int32)
  id: Repeat(System.String,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Repeat(String, Int32)
  nameWithType: UtilExt.Repeat(String, Int32)
  fullName: SearchAThing.UtilExt.Repeat(System.String, System.Int32)
  type: Method
  source:
    id: Repeat
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 223
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nRepeat given string for cnt by concatenate itself\n"
  example: []
  syntax:
    content: public static string Repeat(this string s, int cnt)
    parameters:
    - id: s
      type: System.String
    - id: cnt
      type: System.Int32
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Repeat(s As String, cnt As Integer) As String
  overload: SearchAThing.UtilExt.Repeat*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.WildcardToRegex(System.String)
  commentId: M:SearchAThing.UtilExt.WildcardToRegex(System.String)
  id: WildcardToRegex(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: WildcardToRegex(String)
  nameWithType: UtilExt.WildcardToRegex(String)
  fullName: SearchAThing.UtilExt.WildcardToRegex(System.String)
  type: Method
  source:
    id: WildcardToRegex
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 241
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nconvert wildcard pattern to regex\nthe asterisk &apos;*&apos; character replace any group of chars\nthe question &apos;?&apos; character replace any single character\n"
  example: []
  syntax:
    content: public static string WildcardToRegex(this string pattern)
    parameters:
    - id: pattern
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WildcardToRegex(pattern As String) As String
  overload: SearchAThing.UtilExt.WildcardToRegex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.WildcardMatch(System.String,System.String,System.Boolean)
  commentId: M:SearchAThing.UtilExt.WildcardMatch(System.String,System.String,System.Boolean)
  id: WildcardMatch(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: WildcardMatch(String, String, Boolean)
  nameWithType: UtilExt.WildcardMatch(String, String, Boolean)
  fullName: SearchAThing.UtilExt.WildcardMatch(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: WildcardMatch
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 251
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturn true if given string matches the given pattern\nthe asterisk &apos;*&apos; character replace any group of chars\nthe question &apos;?&apos; character replace any single character\n"
  example: []
  syntax:
    content: public static bool WildcardMatch(this string str, string pattern, bool caseSentitive = true)
    parameters:
    - id: str
      type: System.String
    - id: pattern
      type: System.String
    - id: caseSentitive
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WildcardMatch(str As String, pattern As String, caseSentitive As Boolean = True) As Boolean
  overload: SearchAThing.UtilExt.WildcardMatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Split(System.String,System.String)
  commentId: M:SearchAThing.UtilExt.Split(System.String,System.String)
  id: Split(System.String,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Split(String, String)
  nameWithType: UtilExt.Split(String, String)
  fullName: SearchAThing.UtilExt.Split(System.String, System.String)
  type: Method
  source:
    id: Split
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 267
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nsplit string with given separator string\n"
  example: []
  syntax:
    content: public static string[] Split(this string str, string sepStr)
    parameters:
    - id: str
      type: System.String
    - id: sepStr
      type: System.String
    return:
      type: System.String[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Split(str As String, sepStr As String) As String()
  overload: SearchAThing.UtilExt.Split*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.GetJsonArray(System.String)
  commentId: M:SearchAThing.UtilExt.GetJsonArray(System.String)
  id: GetJsonArray(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: GetJsonArray(String)
  nameWithType: UtilExt.GetJsonArray(String)
  fullName: SearchAThing.UtilExt.GetJsonArray(System.String)
  type: Method
  source:
    id: GetJsonArray
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 275
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturn dynamic array from given [[xx],[yy],...] json array\n"
  example: []
  syntax:
    content: public static dynamic GetJsonArray(this string jsonDumps)
    parameters:
    - id: jsonDumps
      type: System.String
    return:
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetJsonArray(jsonDumps As String) As Object
  overload: SearchAThing.UtilExt.GetJsonArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Import(System.String)
  commentId: M:SearchAThing.UtilExt.Import(System.String)
  id: Import(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Import(String)
  nameWithType: UtilExt.Import(String)
  fullName: SearchAThing.UtilExt.Import(System.String)
  type: Method
  source:
    id: Import
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 283
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nparse given array of doubles ( invariant ) comma separated\n"
  example: []
  syntax:
    content: public static double[] Import(this string ary)
    parameters:
    - id: ary
      type: System.String
    return:
      type: System.Double[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Import(ary As String) As Double()
  overload: SearchAThing.UtilExt.Import*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.Export(System.Double[])
  commentId: M:SearchAThing.UtilExt.Export(System.Double[])
  id: Export(System.Double[])
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Export(Double[])
  nameWithType: UtilExt.Export(Double[])
  fullName: SearchAThing.UtilExt.Export(System.Double[])
  type: Method
  source:
    id: Export
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 293
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nexport to a string ( invariant ) comma separated\n"
  example: []
  syntax:
    content: public static string Export(this double[] ary)
    parameters:
    - id: ary
      type: System.Double[]
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Export(ary As Double()) As String
  overload: SearchAThing.UtilExt.Export*
  nameWithType.vb: UtilExt.Export(Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.Export(System.Double())
  name.vb: Export(Double())
- uid: SearchAThing.UtilExt.Latest(System.String,System.Int32,System.String)
  commentId: M:SearchAThing.UtilExt.Latest(System.String,System.Int32,System.String)
  id: Latest(System.String,System.Int32,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: Latest(String, Int32, String)
  nameWithType: UtilExt.Latest(String, Int32, String)
  fullName: SearchAThing.UtilExt.Latest(System.String, System.Int32, System.String)
  type: Method
  source:
    id: Latest
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 309
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nconvert a string that exceed N given characters length to {prefix}{latest N chars}\n"
  example: []
  syntax:
    content: public static string Latest(this string str, int last_n_chars, string prefix_if_exceed = "...")
    parameters:
    - id: str
      type: System.String
    - id: last_n_chars
      type: System.Int32
    - id: prefix_if_exceed
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Latest(str As String, last_n_chars As Integer, prefix_if_exceed As String = "...") As String
  overload: SearchAThing.UtilExt.Latest*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.ContainsIgnoreCase(System.String,System.String)
  commentId: M:SearchAThing.UtilExt.ContainsIgnoreCase(System.String,System.String)
  id: ContainsIgnoreCase(System.String,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ContainsIgnoreCase(String, String)
  nameWithType: UtilExt.ContainsIgnoreCase(String, String)
  fullName: SearchAThing.UtilExt.ContainsIgnoreCase(System.String, System.String)
  type: Method
  source:
    id: ContainsIgnoreCase
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 320
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\ncheck if given string contains the part ( ignoring case )\n"
  example: []
  syntax:
    content: public static bool ContainsIgnoreCase(this string str, string part)
    parameters:
    - id: str
      type: System.String
    - id: part
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsIgnoreCase(str As String, part As String) As Boolean
  overload: SearchAThing.UtilExt.ContainsIgnoreCase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.NormalizeWorksheetName(System.String)
  commentId: M:SearchAThing.UtilExt.NormalizeWorksheetName(System.String)
  id: NormalizeWorksheetName(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: NormalizeWorksheetName(String)
  nameWithType: UtilExt.NormalizeWorksheetName(String)
  fullName: SearchAThing.UtilExt.NormalizeWorksheetName(System.String)
  type: Method
  source:
    id: NormalizeWorksheetName
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 328
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nconvert invalid worksheet characters :\\/?*[]&apos; into underscore\n"
  example: []
  syntax:
    content: public static string NormalizeWorksheetName(this string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NormalizeWorksheetName(s As String) As String
  overload: SearchAThing.UtilExt.NormalizeWorksheetName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.NormalizeFilename(System.String,System.Char)
  commentId: M:SearchAThing.UtilExt.NormalizeFilename(System.String,System.Char)
  id: NormalizeFilename(System.String,System.Char)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: NormalizeFilename(String, Char)
  nameWithType: UtilExt.NormalizeFilename(String, Char)
  fullName: SearchAThing.UtilExt.NormalizeFilename(System.String, System.Char)
  type: Method
  source:
    id: NormalizeFilename
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 333
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static string NormalizeFilename(this string filename, char subst = '_')
    parameters:
    - id: filename
      type: System.String
    - id: subst
      type: System.Char
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NormalizeFilename(filename As String, subst As Char = "_"c) As String
  overload: SearchAThing.UtilExt.NormalizeFilename*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.ToStringWrapper(StringBuilder)
  commentId: M:SearchAThing.UtilExt.ToStringWrapper(StringBuilder)
  id: ToStringWrapper(StringBuilder)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ToStringWrapper(StringBuilder)
  nameWithType: UtilExt.ToStringWrapper(StringBuilder)
  fullName: SearchAThing.UtilExt.ToStringWrapper(StringBuilder)
  type: Method
  source:
    id: ToStringWrapper
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 348
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static StringWrapper ToStringWrapper(this StringBuilder sb)
    parameters:
    - id: sb
      type: StringBuilder
    return:
      type: SearchAThing.StringWrapper
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToStringWrapper(sb As StringBuilder) As StringWrapper
  overload: SearchAThing.UtilExt.ToStringWrapper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.ToJson(System.Object)
  commentId: M:SearchAThing.UtilExt.ToJson(System.Object)
  id: ToJson(System.Object)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ToJson(Object)
  nameWithType: UtilExt.ToJson(Object)
  fullName: SearchAThing.UtilExt.ToJson(System.Object)
  type: Method
  source:
    id: ToJson
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 353
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static string ToJson(this object o)
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToJson(o As Object) As String
  overload: SearchAThing.UtilExt.ToJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.TrimNonNumericCharacters(System.String)
  commentId: M:SearchAThing.UtilExt.TrimNonNumericCharacters(System.String)
  id: TrimNonNumericCharacters(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: TrimNonNumericCharacters(String)
  nameWithType: UtilExt.TrimNonNumericCharacters(String)
  fullName: SearchAThing.UtilExt.TrimNonNumericCharacters(System.String)
  type: Method
  source:
    id: TrimNonNumericCharacters
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 361
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nremoves all characters that aren&apos;t 0-9 dot or comma\n"
  example: []
  syntax:
    content: public static string TrimNonNumericCharacters(this string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimNonNumericCharacters(s As String) As String
  overload: SearchAThing.UtilExt.TrimNonNumericCharacters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.ParseInt(System.String)
  commentId: M:SearchAThing.UtilExt.ParseInt(System.String)
  id: ParseInt(System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: ParseInt(String)
  nameWithType: UtilExt.ParseInt(String)
  fullName: SearchAThing.UtilExt.ParseInt(System.String)
  type: Method
  source:
    id: ParseInt
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 373
  assemblies:
  - netcore-util
  namespace: SearchAThing
  syntax:
    content: public static int ParseInt(this string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ParseInt(s As String) As Integer
  overload: SearchAThing.UtilExt.ParseInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.InvarianteDateTime(DateTime,System.String,System.String)
  commentId: M:SearchAThing.UtilExt.InvarianteDateTime(DateTime,System.String,System.String)
  id: InvarianteDateTime(DateTime,System.String,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: InvarianteDateTime(DateTime, String, String)
  nameWithType: UtilExt.InvarianteDateTime(DateTime, String, String)
  fullName: SearchAThing.UtilExt.InvarianteDateTime(DateTime, System.String, System.String)
  type: Method
  source:
    id: InvarianteDateTime
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 378
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturn yyyy-MM-dd HH:mm.ss representation\n"
  example: []
  syntax:
    content: public static string InvarianteDateTime(this DateTime dt, string datesep = "-", string timesep = ":")
    parameters:
    - id: dt
      type: DateTime
    - id: datesep
      type: System.String
    - id: timesep
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvarianteDateTime(dt As DateTime, datesep As String = "-", timesep As String = ":") As String
  overload: SearchAThing.UtilExt.InvarianteDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.InvariantDate(DateTime,System.String)
  commentId: M:SearchAThing.UtilExt.InvariantDate(DateTime,System.String)
  id: InvariantDate(DateTime,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: InvariantDate(DateTime, String)
  nameWithType: UtilExt.InvariantDate(DateTime, String)
  fullName: SearchAThing.UtilExt.InvariantDate(DateTime, System.String)
  type: Method
  source:
    id: InvariantDate
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 386
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturn yyyy-MM-dd representation\n"
  example: []
  syntax:
    content: public static string InvariantDate(this DateTime dt, string sep = "-")
    parameters:
    - id: dt
      type: DateTime
    - id: sep
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvariantDate(dt As DateTime, sep As String = "-") As String
  overload: SearchAThing.UtilExt.InvariantDate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.InvariantTime(DateTime,System.String)
  commentId: M:SearchAThing.UtilExt.InvariantTime(DateTime,System.String)
  id: InvariantTime(DateTime,System.String)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: InvariantTime(DateTime, String)
  nameWithType: UtilExt.InvariantTime(DateTime, String)
  fullName: SearchAThing.UtilExt.InvariantTime(DateTime, System.String)
  type: Method
  source:
    id: InvariantTime
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 394
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nreturn HH:mm:ss representation\n"
  example: []
  syntax:
    content: public static string InvariantTime(this DateTime dt, string sep = ":")
    parameters:
    - id: dt
      type: DateTime
    - id: sep
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvariantTime(dt As DateTime, sep As String = ":") As String
  overload: SearchAThing.UtilExt.InvariantTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.RegexMatch(System.String,System.String,RegexOptions)
  commentId: M:SearchAThing.UtilExt.RegexMatch(System.String,System.String,RegexOptions)
  id: RegexMatch(System.String,System.String,RegexOptions)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: RegexMatch(String, String, RegexOptions)
  nameWithType: UtilExt.RegexMatch(String, String, RegexOptions)
  fullName: SearchAThing.UtilExt.RegexMatch(System.String, System.String, RegexOptions)
  type: Method
  source:
    id: RegexMatch
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 402
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nretrieve nr. of occurrence of given pattern through regex\n"
  example: []
  syntax:
    content: public static int RegexMatch(this string s, string pattern, RegexOptions opt = null)
    parameters:
    - id: s
      type: System.String
    - id: pattern
      type: System.String
    - id: opt
      type: RegexOptions
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegexMatch(s As String, pattern As String, opt As RegexOptions = Nothing) As Integer
  overload: SearchAThing.UtilExt.RegexMatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.UtilExt.MatchesFilter(IEnumerable{System.String},System.String,System.Boolean)
  commentId: M:SearchAThing.UtilExt.MatchesFilter(IEnumerable{System.String},System.String,System.Boolean)
  id: MatchesFilter(IEnumerable{System.String},System.String,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.UtilExt
  langs:
  - csharp
  - vb
  name: MatchesFilter(IEnumerable<String>, String, Boolean)
  nameWithType: UtilExt.MatchesFilter(IEnumerable<String>, String, Boolean)
  fullName: SearchAThing.UtilExt.MatchesFilter(IEnumerable<System.String>, System.String, System.Boolean)
  type: Method
  source:
    id: MatchesFilter
    path: Z:\netcore-util\netcore-util\String.cs
    startLine: 415
  assemblies:
  - netcore-util
  namespace: SearchAThing
  summary: "\nChecks whatever fields matches given filter all words in any of inputs.\nex. fields={ &quot;abc&quot;, &quot;de&quot; } filter=&quot;a&quot; results: true\nex. fields={ &quot;abc&quot;, &quot;de&quot; } filter=&quot;a d&quot; results: true\nex. fields={ &quot;abc&quot;, &quot;de&quot; } filter=&quot;a f&quot; results: false\nautoskips null fields check;\nreturns true if filter empty\n"
  example: []
  syntax:
    content: public static bool MatchesFilter(this IEnumerable<string> fields, string filter, bool ignoreCase = true)
    parameters:
    - id: fields
      type: IEnumerable{System.String}
    - id: filter
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MatchesFilter(fields As IEnumerable(Of String), filter As String, ignoreCase As Boolean = True) As Boolean
  overload: SearchAThing.UtilExt.MatchesFilter*
  nameWithType.vb: UtilExt.MatchesFilter(IEnumerable(Of String), String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.UtilExt.MatchesFilter(IEnumerable(Of System.String), System.String, System.Boolean)
  name.vb: MatchesFilter(IEnumerable(Of String), String, Boolean)
references:
- uid: SearchAThing
  commentId: N:SearchAThing
  name: SearchAThing
  nameWithType: SearchAThing
  fullName: SearchAThing
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.UtilExt.UnspecifiedAsUTCDateTime*
  commentId: Overload:SearchAThing.UtilExt.UnspecifiedAsUTCDateTime
  name: UnspecifiedAsUTCDateTime
  nameWithType: UtilExt.UnspecifiedAsUTCDateTime
  fullName: SearchAThing.UtilExt.UnspecifiedAsUTCDateTime
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: SearchAThing.UtilExt.ToExpando*
  commentId: Overload:SearchAThing.UtilExt.ToExpando
  name: ToExpando
  nameWithType: UtilExt.ToExpando
  fullName: SearchAThing.UtilExt.ToExpando
- uid: ExpandoObject
  commentId: '!:ExpandoObject'
  isExternal: true
  name: ExpandoObject
  nameWithType: ExpandoObject
  fullName: ExpandoObject
- uid: SearchAThing.UtilExt.Details*
  commentId: Overload:SearchAThing.UtilExt.Details
  name: Details
  nameWithType: UtilExt.Details
  fullName: SearchAThing.UtilExt.Details
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.UtilExt.DetailsObject*
  commentId: Overload:SearchAThing.UtilExt.DetailsObject
  name: DetailsObject
  nameWithType: UtilExt.DetailsObject
  fullName: SearchAThing.UtilExt.DetailsObject
- uid: SearchAThing.ErrorInfo
  commentId: T:SearchAThing.ErrorInfo
  parent: SearchAThing
  name: ErrorInfo
  nameWithType: ErrorInfo
  fullName: SearchAThing.ErrorInfo
- uid: SearchAThing.UtilExt.GetMemberNames*
  commentId: Overload:SearchAThing.UtilExt.GetMemberNames
  name: GetMemberNames
  nameWithType: UtilExt.GetMemberNames
  fullName: SearchAThing.UtilExt.GetMemberNames
- uid: Expression{Func{{T},System.Object}}
  commentId: '!:Expression{Func{``0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: Expression<Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: Expression(Of Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.GetMemberNamesExt*
  commentId: Overload:SearchAThing.UtilExt.GetMemberNamesExt
  name: GetMemberNamesExt
  nameWithType: UtilExt.GetMemberNamesExt
  fullName: SearchAThing.UtilExt.GetMemberNamesExt
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: HashSet{System.String}
  commentId: '!:HashSet{System.String}'
  definition: HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: HashSet`1
  commentId: '!:HashSet`1'
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.GetMemberName*
  commentId: Overload:SearchAThing.UtilExt.GetMemberName
  name: GetMemberName
  nameWithType: UtilExt.GetMemberName
  fullName: SearchAThing.UtilExt.GetMemberName
- uid: SearchAThing.UtilExt.CreateGetterSetter*
  commentId: Overload:SearchAThing.UtilExt.CreateGetterSetter
  name: CreateGetterSetter
  nameWithType: UtilExt.CreateGetterSetter
  fullName: SearchAThing.UtilExt.CreateGetterSetter
- uid: Expression{Func{{T},{V}}}
  commentId: '!:Expression{Func{``0,``1}}'
  definition: Expression`1
  name: Expression<Func<T, V>>
  nameWithType: Expression<Func<T, V>>
  fullName: Expression<Func<T, V>>
  nameWithType.vb: Expression(Of Func(Of T, V))
  fullName.vb: Expression(Of Func(Of T, V))
  name.vb: Expression(Of Func(Of T, V))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{Func{{T},{V}},Action{{T},{V}}}
  commentId: T:System.ValueTuple{Func{``0,``1},Action{``0,``1}}
  parent: System
  definition: System.ValueTuple{Func{``0,``1},Action{``0,``1}}
  name: ValueTuple<Func<T, V>, Action<T, V>>
  nameWithType: ValueTuple<Func<T, V>, Action<T, V>>
  fullName: System.ValueTuple<Func<T, V>, Action<T, V>>
  nameWithType.vb: ValueTuple(Of Func(Of T, V), Action(Of T, V))
  fullName.vb: System.ValueTuple(Of Func(Of T, V), Action(Of T, V))
  name.vb: ValueTuple(Of Func(Of T, V), Action(Of T, V))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{Func{``0,``1},Action{``0,``1}}
  commentId: T:System.ValueTuple{Func{``0,``1},Action{``0,``1}}
  isExternal: true
  name: ValueTuple<Func<T, V>, Action<T, V>>
  nameWithType: ValueTuple<Func<T, V>, Action<T, V>>
  fullName: System.ValueTuple<Func<T, V>, Action<T, V>>
  nameWithType.vb: ValueTuple(Of Func(Of T, V), Action(Of T, V))
  fullName.vb: System.ValueTuple(Of Func(Of T, V), Action(Of T, V))
  name.vb: ValueTuple(Of Func(Of T, V), Action(Of T, V))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SearchAThing.UtilExt.Distinct*
  commentId: Overload:SearchAThing.UtilExt.Distinct
  name: Distinct
  nameWithType: UtilExt.Distinct
  fullName: SearchAThing.UtilExt.Distinct
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{T},{TKey}}
  commentId: '!:Func{``0,``1}'
  definition: Func`2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.WithIndex*
  commentId: Overload:SearchAThing.UtilExt.WithIndex
  name: WithIndex
  nameWithType: UtilExt.WithIndex
  fullName: SearchAThing.UtilExt.WithIndex
- uid: IEnumerable{System.ValueTuple{{T},System.Int32}}
  commentId: '!:IEnumerable{System.ValueTuple{``0,System.Int32}}'
  definition: IEnumerable`1
  name: IEnumerable<ValueTuple<T, Int32>>
  nameWithType: IEnumerable<ValueTuple<T, Int32>>
  fullName: IEnumerable<System.ValueTuple<T, System.Int32>>
  nameWithType.vb: IEnumerable(Of ValueTuple(Of T, Int32))
  fullName.vb: IEnumerable(Of System.ValueTuple(Of T, System.Int32))
  name.vb: IEnumerable(Of ValueTuple(Of T, Int32))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.WithIndexIsLast*
  commentId: Overload:SearchAThing.UtilExt.WithIndexIsLast
  name: WithIndexIsLast
  nameWithType: UtilExt.WithIndexIsLast
  fullName: SearchAThing.UtilExt.WithIndexIsLast
- uid: IEnumerable{System.ValueTuple{{T},System.Int32,System.Boolean}}
  commentId: '!:IEnumerable{System.ValueTuple{``0,System.Int32,System.Boolean}}'
  definition: IEnumerable`1
  name: IEnumerable<ValueTuple<T, Int32, Boolean>>
  nameWithType: IEnumerable<ValueTuple<T, Int32, Boolean>>
  fullName: IEnumerable<System.ValueTuple<T, System.Int32, System.Boolean>>
  nameWithType.vb: IEnumerable(Of ValueTuple(Of T, Int32, Boolean))
  fullName.vb: IEnumerable(Of System.ValueTuple(Of T, System.Int32, System.Boolean))
  name.vb: IEnumerable(Of ValueTuple(Of T, Int32, Boolean))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.EqualsAutoTol*
  commentId: Overload:SearchAThing.UtilExt.EqualsAutoTol
  name: EqualsAutoTol
  nameWithType: UtilExt.EqualsAutoTol
  fullName: SearchAThing.UtilExt.EqualsAutoTol
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.UtilExt.MRound*
  commentId: Overload:SearchAThing.UtilExt.MRound
  name: MRound
  nameWithType: UtilExt.MRound
  fullName: SearchAThing.UtilExt.MRound
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.ToDeg*
  commentId: Overload:SearchAThing.UtilExt.ToDeg
  name: ToDeg
  nameWithType: UtilExt.ToDeg
  fullName: SearchAThing.UtilExt.ToDeg
- uid: SearchAThing.UtilExt.ToRad*
  commentId: Overload:SearchAThing.UtilExt.ToRad
  name: ToRad
  nameWithType: UtilExt.ToRad
  fullName: SearchAThing.UtilExt.ToRad
- uid: SearchAThing.UtilExt.Stringify*
  commentId: Overload:SearchAThing.UtilExt.Stringify
  name: Stringify
  nameWithType: UtilExt.Stringify
  fullName: SearchAThing.UtilExt.Stringify
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SearchAThing.UtilExt.Magnitude*
  commentId: Overload:SearchAThing.UtilExt.Magnitude
  name: Magnitude
  nameWithType: UtilExt.Magnitude
  fullName: SearchAThing.UtilExt.Magnitude
- uid: SearchAThing.UtilExt.PercentDifference*
  commentId: Overload:SearchAThing.UtilExt.PercentDifference
  name: PercentDifference
  nameWithType: UtilExt.PercentDifference
  fullName: SearchAThing.UtilExt.PercentDifference
- uid: SearchAThing.UtilExt.InvDoubleParse*
  commentId: Overload:SearchAThing.UtilExt.InvDoubleParse
  name: InvDoubleParse
  nameWithType: UtilExt.InvDoubleParse
  fullName: SearchAThing.UtilExt.InvDoubleParse
- uid: SearchAThing.UtilExt.SmartDoubleParse*
  commentId: Overload:SearchAThing.UtilExt.SmartDoubleParse
  name: SmartDoubleParse
  nameWithType: UtilExt.SmartDoubleParse
  fullName: SearchAThing.UtilExt.SmartDoubleParse
- uid: SearchAThing.UtilExt.Mean*
  commentId: Overload:SearchAThing.UtilExt.Mean
  name: Mean
  nameWithType: UtilExt.Mean
  fullName: SearchAThing.UtilExt.Mean
- uid: IEnumerable{System.Double}
  commentId: '!:IEnumerable{System.Double}'
  definition: IEnumerable`1
  name: IEnumerable<Double>
  nameWithType: IEnumerable<Double>
  fullName: IEnumerable<System.Double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.ToString*
  commentId: Overload:SearchAThing.UtilExt.ToString
  name: ToString
  nameWithType: UtilExt.ToString
  fullName: SearchAThing.UtilExt.ToString
- uid: SearchAThing.UtilExt.EqualsTol*
  commentId: Overload:SearchAThing.UtilExt.EqualsTol
  name: EqualsTol
  nameWithType: UtilExt.EqualsTol
  fullName: SearchAThing.UtilExt.EqualsTol
- uid: SearchAThing.UtilExt.GreatThanTol*
  commentId: Overload:SearchAThing.UtilExt.GreatThanTol
  name: GreatThanTol
  nameWithType: UtilExt.GreatThanTol
  fullName: SearchAThing.UtilExt.GreatThanTol
- uid: SearchAThing.UtilExt.GreatThanOrEqualsTol*
  commentId: Overload:SearchAThing.UtilExt.GreatThanOrEqualsTol
  name: GreatThanOrEqualsTol
  nameWithType: UtilExt.GreatThanOrEqualsTol
  fullName: SearchAThing.UtilExt.GreatThanOrEqualsTol
- uid: SearchAThing.UtilExt.LessThanTol*
  commentId: Overload:SearchAThing.UtilExt.LessThanTol
  name: LessThanTol
  nameWithType: UtilExt.LessThanTol
  fullName: SearchAThing.UtilExt.LessThanTol
- uid: SearchAThing.UtilExt.LessThanOrEqualsTol*
  commentId: Overload:SearchAThing.UtilExt.LessThanOrEqualsTol
  name: LessThanOrEqualsTol
  nameWithType: UtilExt.LessThanOrEqualsTol
  fullName: SearchAThing.UtilExt.LessThanOrEqualsTol
- uid: SearchAThing.UtilExt.CompareTol*
  commentId: Overload:SearchAThing.UtilExt.CompareTol
  name: CompareTol
  nameWithType: UtilExt.CompareTol
  fullName: SearchAThing.UtilExt.CompareTol
- uid: SearchAThing.UtilExt.IsInRange*
  commentId: Overload:SearchAThing.UtilExt.IsInRange
  name: IsInRange
  nameWithType: UtilExt.IsInRange
  fullName: SearchAThing.UtilExt.IsInRange
- uid: SearchAThing.UtilExt.Sign*
  commentId: Overload:SearchAThing.UtilExt.Sign
  name: Sign
  nameWithType: UtilExt.Sign
  fullName: SearchAThing.UtilExt.Sign
- uid: SearchAThing.UtilExt.Eval*
  commentId: Overload:SearchAThing.UtilExt.Eval
  name: Eval
  nameWithType: UtilExt.Eval
  fullName: SearchAThing.UtilExt.Eval
- uid: Func{{T},{U}}
  commentId: '!:Func{``0,``1}'
  definition: Func`2
  name: Func<T, U>
  nameWithType: Func<T, U>
  fullName: Func<T, U>
  nameWithType.vb: Func(Of T, U)
  fullName.vb: Func(Of T, U)
  name.vb: Func(Of T, U)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: '{U}'
  commentId: '!:U'
  definition: U
  name: U
  nameWithType: U
  fullName: U
- uid: U
  commentId: '!:U'
  name: U
  nameWithType: U
  fullName: U
- uid: SearchAThing.UtilExt.Sort*
  commentId: Overload:SearchAThing.UtilExt.Sort
  name: Sort
  nameWithType: UtilExt.Sort
  fullName: SearchAThing.UtilExt.Sort
- uid: ObservableCollection{{TSource}}
  commentId: '!:ObservableCollection{``0}'
  definition: ObservableCollection`1
  name: ObservableCollection<TSource>
  nameWithType: ObservableCollection<TSource>
  fullName: ObservableCollection<TSource>
  nameWithType.vb: ObservableCollection(Of TSource)
  fullName.vb: ObservableCollection(Of TSource)
  name.vb: ObservableCollection(Of TSource)
  spec.csharp:
  - uid: ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: ObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: ObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{TSource},{TKey}}
  commentId: '!:Func{``0,``1}'
  definition: Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullName.vb: Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: ObservableCollection`1
  commentId: '!:ObservableCollection`1'
  isExternal: true
  name: ObservableCollection<>
  nameWithType: ObservableCollection<>
  fullName: ObservableCollection<>
  nameWithType.vb: ObservableCollection(Of )
  fullName.vb: ObservableCollection(Of )
  name.vb: ObservableCollection(Of )
  spec.csharp:
  - uid: ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: ObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ObservableCollection`1
    name: ObservableCollection
    nameWithType: ObservableCollection
    fullName: ObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.Assign*
  commentId: Overload:SearchAThing.UtilExt.Assign
  name: Assign
  nameWithType: UtilExt.Assign
  fullName: SearchAThing.UtilExt.Assign
- uid: Func{PropertyInfo,System.Boolean}
  commentId: '!:Func{PropertyInfo,System.Boolean}'
  definition: Func`2
  name: Func<PropertyInfo, Boolean>
  nameWithType: Func<PropertyInfo, Boolean>
  fullName: Func<PropertyInfo, System.Boolean>
  nameWithType.vb: Func(Of PropertyInfo, Boolean)
  fullName.vb: Func(Of PropertyInfo, System.Boolean)
  name.vb: Func(Of PropertyInfo, Boolean)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.CopyFrom*
  commentId: Overload:SearchAThing.UtilExt.CopyFrom
  name: CopyFrom
  nameWithType: UtilExt.CopyFrom
  fullName: SearchAThing.UtilExt.CopyFrom
- uid: SearchAThing.UtilExt.CopyFromCustom*
  commentId: Overload:SearchAThing.UtilExt.CopyFromCustom
  name: CopyFromCustom
  nameWithType: UtilExt.CopyFromCustom
  fullName: SearchAThing.UtilExt.CopyFromCustom
- uid: SearchAThing.UtilExt.CopyFromCustomDelegate
  commentId: T:SearchAThing.UtilExt.CopyFromCustomDelegate
  parent: SearchAThing
  name: UtilExt.CopyFromCustomDelegate
  nameWithType: UtilExt.CopyFromCustomDelegate
  fullName: SearchAThing.UtilExt.CopyFromCustomDelegate
- uid: SearchAThing.UtilExt.CopyFromExclude*
  commentId: Overload:SearchAThing.UtilExt.CopyFromExclude
  name: CopyFromExclude
  nameWithType: UtilExt.CopyFromExclude
  fullName: SearchAThing.UtilExt.CopyFromExclude
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SearchAThing.UtilExt.CopyFromInclude*
  commentId: Overload:SearchAThing.UtilExt.CopyFromInclude
  name: CopyFromInclude
  nameWithType: UtilExt.CopyFromInclude
  fullName: SearchAThing.UtilExt.CopyFromInclude
- uid: SearchAThing.UtilExt.Align*
  commentId: Overload:SearchAThing.UtilExt.Align
  name: Align
  nameWithType: UtilExt.Align
  fullName: SearchAThing.UtilExt.Align
- uid: SearchAThing.ColumnAlignment
  commentId: T:SearchAThing.ColumnAlignment
  parent: SearchAThing
  name: ColumnAlignment
  nameWithType: ColumnAlignment
  fullName: SearchAThing.ColumnAlignment
- uid: SearchAThing.UtilExt.TableFormat*
  commentId: Overload:SearchAThing.UtilExt.TableFormat
  name: TableFormat
  nameWithType: UtilExt.TableFormat
  fullName: SearchAThing.UtilExt.TableFormat
- uid: IEnumerable{IEnumerable{System.String}}
  commentId: '!:IEnumerable{IEnumerable{System.String}}'
  definition: IEnumerable`1
  name: IEnumerable<IEnumerable<String>>
  nameWithType: IEnumerable<IEnumerable<String>>
  fullName: IEnumerable<IEnumerable<System.String>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of String))
  fullName.vb: IEnumerable(Of IEnumerable(Of System.String))
  name.vb: IEnumerable(Of IEnumerable(Of String))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{SearchAThing.ColumnAlignment}
  commentId: '!:IEnumerable{SearchAThing.ColumnAlignment}'
  definition: IEnumerable`1
  name: IEnumerable<ColumnAlignment>
  nameWithType: IEnumerable<ColumnAlignment>
  fullName: IEnumerable<SearchAThing.ColumnAlignment>
  nameWithType.vb: IEnumerable(Of ColumnAlignment)
  fullName.vb: IEnumerable(Of SearchAThing.ColumnAlignment)
  name.vb: IEnumerable(Of ColumnAlignment)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.ColumnAlignment
    name: ColumnAlignment
    nameWithType: ColumnAlignment
    fullName: SearchAThing.ColumnAlignment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.ColumnAlignment
    name: ColumnAlignment
    nameWithType: ColumnAlignment
    fullName: SearchAThing.ColumnAlignment
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.StripBegin*
  commentId: Overload:SearchAThing.UtilExt.StripBegin
  name: StripBegin
  nameWithType: UtilExt.StripBegin
  fullName: SearchAThing.UtilExt.StripBegin
- uid: System.Char
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: SearchAThing.UtilExt.StripEnd*
  commentId: Overload:SearchAThing.UtilExt.StripEnd
  name: StripEnd
  nameWithType: UtilExt.StripEnd
  fullName: SearchAThing.UtilExt.StripEnd
- uid: SearchAThing.UtilExt.NextLine*
  commentId: Overload:SearchAThing.UtilExt.NextLine
  name: NextLine
  nameWithType: UtilExt.NextLine
  fullName: SearchAThing.UtilExt.NextLine
- uid: SearchAThing.UtilExt.Lines*
  commentId: Overload:SearchAThing.UtilExt.Lines
  name: Lines
  nameWithType: UtilExt.Lines
  fullName: SearchAThing.UtilExt.Lines
- uid: SearchAThing.UtilExt.HumanReadable*
  commentId: Overload:SearchAThing.UtilExt.HumanReadable
  name: HumanReadable
  nameWithType: UtilExt.HumanReadable
  fullName: SearchAThing.UtilExt.HumanReadable
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: SearchAThing.UtilExt.Repeat*
  commentId: Overload:SearchAThing.UtilExt.Repeat
  name: Repeat
  nameWithType: UtilExt.Repeat
  fullName: SearchAThing.UtilExt.Repeat
- uid: SearchAThing.UtilExt.WildcardToRegex*
  commentId: Overload:SearchAThing.UtilExt.WildcardToRegex
  name: WildcardToRegex
  nameWithType: UtilExt.WildcardToRegex
  fullName: SearchAThing.UtilExt.WildcardToRegex
- uid: SearchAThing.UtilExt.WildcardMatch*
  commentId: Overload:SearchAThing.UtilExt.WildcardMatch
  name: WildcardMatch
  nameWithType: UtilExt.WildcardMatch
  fullName: SearchAThing.UtilExt.WildcardMatch
- uid: SearchAThing.UtilExt.Split*
  commentId: Overload:SearchAThing.UtilExt.Split
  name: Split
  nameWithType: UtilExt.Split
  fullName: SearchAThing.UtilExt.Split
- uid: SearchAThing.UtilExt.GetJsonArray*
  commentId: Overload:SearchAThing.UtilExt.GetJsonArray
  name: GetJsonArray
  nameWithType: UtilExt.GetJsonArray
  fullName: SearchAThing.UtilExt.GetJsonArray
- uid: SearchAThing.UtilExt.Import*
  commentId: Overload:SearchAThing.UtilExt.Import
  name: Import
  nameWithType: UtilExt.Import
  fullName: SearchAThing.UtilExt.Import
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SearchAThing.UtilExt.Export*
  commentId: Overload:SearchAThing.UtilExt.Export
  name: Export
  nameWithType: UtilExt.Export
  fullName: SearchAThing.UtilExt.Export
- uid: SearchAThing.UtilExt.Latest*
  commentId: Overload:SearchAThing.UtilExt.Latest
  name: Latest
  nameWithType: UtilExt.Latest
  fullName: SearchAThing.UtilExt.Latest
- uid: SearchAThing.UtilExt.ContainsIgnoreCase*
  commentId: Overload:SearchAThing.UtilExt.ContainsIgnoreCase
  name: ContainsIgnoreCase
  nameWithType: UtilExt.ContainsIgnoreCase
  fullName: SearchAThing.UtilExt.ContainsIgnoreCase
- uid: SearchAThing.UtilExt.NormalizeWorksheetName*
  commentId: Overload:SearchAThing.UtilExt.NormalizeWorksheetName
  name: NormalizeWorksheetName
  nameWithType: UtilExt.NormalizeWorksheetName
  fullName: SearchAThing.UtilExt.NormalizeWorksheetName
- uid: SearchAThing.UtilExt.NormalizeFilename*
  commentId: Overload:SearchAThing.UtilExt.NormalizeFilename
  name: NormalizeFilename
  nameWithType: UtilExt.NormalizeFilename
  fullName: SearchAThing.UtilExt.NormalizeFilename
- uid: SearchAThing.UtilExt.ToStringWrapper*
  commentId: Overload:SearchAThing.UtilExt.ToStringWrapper
  name: ToStringWrapper
  nameWithType: UtilExt.ToStringWrapper
  fullName: SearchAThing.UtilExt.ToStringWrapper
- uid: StringBuilder
  commentId: '!:StringBuilder'
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: StringBuilder
- uid: SearchAThing.StringWrapper
  commentId: T:SearchAThing.StringWrapper
  parent: SearchAThing
  name: StringWrapper
  nameWithType: StringWrapper
  fullName: SearchAThing.StringWrapper
- uid: SearchAThing.UtilExt.ToJson*
  commentId: Overload:SearchAThing.UtilExt.ToJson
  name: ToJson
  nameWithType: UtilExt.ToJson
  fullName: SearchAThing.UtilExt.ToJson
- uid: SearchAThing.UtilExt.TrimNonNumericCharacters*
  commentId: Overload:SearchAThing.UtilExt.TrimNonNumericCharacters
  name: TrimNonNumericCharacters
  nameWithType: UtilExt.TrimNonNumericCharacters
  fullName: SearchAThing.UtilExt.TrimNonNumericCharacters
- uid: SearchAThing.UtilExt.ParseInt*
  commentId: Overload:SearchAThing.UtilExt.ParseInt
  name: ParseInt
  nameWithType: UtilExt.ParseInt
  fullName: SearchAThing.UtilExt.ParseInt
- uid: SearchAThing.UtilExt.InvarianteDateTime*
  commentId: Overload:SearchAThing.UtilExt.InvarianteDateTime
  name: InvarianteDateTime
  nameWithType: UtilExt.InvarianteDateTime
  fullName: SearchAThing.UtilExt.InvarianteDateTime
- uid: SearchAThing.UtilExt.InvariantDate*
  commentId: Overload:SearchAThing.UtilExt.InvariantDate
  name: InvariantDate
  nameWithType: UtilExt.InvariantDate
  fullName: SearchAThing.UtilExt.InvariantDate
- uid: SearchAThing.UtilExt.InvariantTime*
  commentId: Overload:SearchAThing.UtilExt.InvariantTime
  name: InvariantTime
  nameWithType: UtilExt.InvariantTime
  fullName: SearchAThing.UtilExt.InvariantTime
- uid: SearchAThing.UtilExt.RegexMatch*
  commentId: Overload:SearchAThing.UtilExt.RegexMatch
  name: RegexMatch
  nameWithType: UtilExt.RegexMatch
  fullName: SearchAThing.UtilExt.RegexMatch
- uid: RegexOptions
  commentId: '!:RegexOptions'
  isExternal: true
  name: RegexOptions
  nameWithType: RegexOptions
  fullName: RegexOptions
- uid: SearchAThing.UtilExt.MatchesFilter*
  commentId: Overload:SearchAThing.UtilExt.MatchesFilter
  name: MatchesFilter
  nameWithType: UtilExt.MatchesFilter
  fullName: SearchAThing.UtilExt.MatchesFilter
