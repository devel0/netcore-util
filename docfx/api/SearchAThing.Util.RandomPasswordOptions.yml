### YamlMime:ManagedReference
items:
- uid: SearchAThing.Util.RandomPasswordOptions
  commentId: T:SearchAThing.Util.RandomPasswordOptions
  id: RandomPasswordOptions
  parent: SearchAThing.Util
  children:
  - SearchAThing.Util.RandomPasswordOptions.AllowLetter
  - SearchAThing.Util.RandomPasswordOptions.AllowLowercase
  - SearchAThing.Util.RandomPasswordOptions.AllowNumber
  - SearchAThing.Util.RandomPasswordOptions.AllowSpecial
  - SearchAThing.Util.RandomPasswordOptions.AllowUppercase
  - SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber
  - SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial
  - SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase
  - SearchAThing.Util.RandomPasswordOptions.AvoidChars
  - SearchAThing.Util.RandomPasswordOptions.Length
  - SearchAThing.Util.RandomPasswordOptions.LoopCount
  - SearchAThing.Util.RandomPasswordOptions.MaxSpecial
  langs:
  - csharp
  - vb
  name: RandomPasswordOptions
  nameWithType: RandomPasswordOptions
  fullName: SearchAThing.Util.RandomPasswordOptions
  type: Class
  source:
    id: RandomPasswordOptions
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 13
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\nto generate a pin use follow config ( AllowLetter = false, AtLeastOneUppercase = false, Length = 4 )\n"
  example: []
  syntax:
    content: 'public class RandomPasswordOptions : object'
    content.vb: >-
      Public Class RandomPasswordOptions
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.SearchAThing.UtilExt.ToExpando
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{SearchAThing.Util.RandomPasswordOptions,System.Object}})
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.GetMemberName``1(Expression{Func{SearchAThing.Util.RandomPasswordOptions,System.Object}})
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.Eval``2(Func{SearchAThing.Util.RandomPasswordOptions,{U}})
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.Assign``1(SearchAThing.Util.RandomPasswordOptions,Func{PropertyInfo,System.Boolean})
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFrom``1(SearchAThing.Util.RandomPasswordOptions,Func{PropertyInfo,System.Boolean})
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFromCustom``1(SearchAThing.Util.RandomPasswordOptions,SearchAThing.UtilExt.CopyFromCustomDelegate)
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFromExclude``1(SearchAThing.Util.RandomPasswordOptions,System.String[])
  - SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFromInclude``1(SearchAThing.Util.RandomPasswordOptions,System.String[])
  - System.Object.SearchAThing.UtilExt.ToJson
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Util.RandomPasswordOptions.AllowNumber
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AllowNumber
  id: AllowNumber
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AllowNumber
  nameWithType: RandomPasswordOptions.AllowNumber
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowNumber
  type: Property
  source:
    id: AllowNumber
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 18
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: true\n"
  example: []
  syntax:
    content: public bool AllowNumber { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowNumber As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AllowNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AllowLetter
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AllowLetter
  id: AllowLetter
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AllowLetter
  nameWithType: RandomPasswordOptions.AllowLetter
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowLetter
  type: Property
  source:
    id: AllowLetter
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 23
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: true\n"
  example: []
  syntax:
    content: public bool AllowLetter { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowLetter As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AllowLetter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AllowLowercase
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AllowLowercase
  id: AllowLowercase
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AllowLowercase
  nameWithType: RandomPasswordOptions.AllowLowercase
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowLowercase
  type: Property
  source:
    id: AllowLowercase
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 28
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: true\n"
  example: []
  syntax:
    content: public bool AllowLowercase { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowLowercase As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AllowLowercase*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AllowUppercase
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AllowUppercase
  id: AllowUppercase
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AllowUppercase
  nameWithType: RandomPasswordOptions.AllowUppercase
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowUppercase
  type: Property
  source:
    id: AllowUppercase
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 33
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: true\n"
  example: []
  syntax:
    content: public bool AllowUppercase { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowUppercase As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AllowUppercase*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AllowSpecial
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AllowSpecial
  id: AllowSpecial
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AllowSpecial
  nameWithType: RandomPasswordOptions.AllowSpecial
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowSpecial
  type: Property
  source:
    id: AllowSpecial
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 38
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: false\n"
  example: []
  syntax:
    content: public bool AllowSpecial { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowSpecial As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AllowSpecial*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.MaxSpecial
  commentId: P:SearchAThing.Util.RandomPasswordOptions.MaxSpecial
  id: MaxSpecial
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: MaxSpecial
  nameWithType: RandomPasswordOptions.MaxSpecial
  fullName: SearchAThing.Util.RandomPasswordOptions.MaxSpecial
  type: Property
  source:
    id: MaxSpecial
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 43
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: 1\n"
  example: []
  syntax:
    content: public int MaxSpecial { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MaxSpecial As Integer
  overload: SearchAThing.Util.RandomPasswordOptions.MaxSpecial*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.Length
  commentId: P:SearchAThing.Util.RandomPasswordOptions.Length
  id: Length
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: RandomPasswordOptions.Length
  fullName: SearchAThing.Util.RandomPasswordOptions.Length
  type: Property
  source:
    id: Length
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 48
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: 12\n"
  example: []
  syntax:
    content: public int Length { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Length As Integer
  overload: SearchAThing.Util.RandomPasswordOptions.Length*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AvoidChars
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AvoidChars
  id: AvoidChars
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AvoidChars
  nameWithType: RandomPasswordOptions.AvoidChars
  fullName: SearchAThing.Util.RandomPasswordOptions.AvoidChars
  type: Property
  source:
    id: AvoidChars
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 54
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\navoid ambigous chars\nfor example : new[] { &apos;l&apos;, &apos;I&apos;, &apos;O&apos;, &apos;0&apos; }\ndefault: null\n"
  example: []
  syntax:
    content: public char[] AvoidChars { get; set; }
    parameters: []
    return:
      type: System.Char[]
    content.vb: Public Property AvoidChars As Char()
  overload: SearchAThing.Util.RandomPasswordOptions.AvoidChars*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber
  id: AtLeastOneNumber
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AtLeastOneNumber
  nameWithType: RandomPasswordOptions.AtLeastOneNumber
  fullName: SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber
  type: Property
  source:
    id: AtLeastOneNumber
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 59
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: true\n"
  example: []
  syntax:
    content: public bool AtLeastOneNumber { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AtLeastOneNumber As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase
  id: AtLeastOneUppercase
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AtLeastOneUppercase
  nameWithType: RandomPasswordOptions.AtLeastOneUppercase
  fullName: SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase
  type: Property
  source:
    id: AtLeastOneUppercase
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 64
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: true\n"
  example: []
  syntax:
    content: public bool AtLeastOneUppercase { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AtLeastOneUppercase As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial
  commentId: P:SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial
  id: AtLeastOneSpecial
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: AtLeastOneSpecial
  nameWithType: RandomPasswordOptions.AtLeastOneSpecial
  fullName: SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial
  type: Property
  source:
    id: AtLeastOneSpecial
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 69
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: false\n"
  example: []
  syntax:
    content: public bool AtLeastOneSpecial { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AtLeastOneSpecial As Boolean
  overload: SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Util.RandomPasswordOptions.LoopCount
  commentId: P:SearchAThing.Util.RandomPasswordOptions.LoopCount
  id: LoopCount
  parent: SearchAThing.Util.RandomPasswordOptions
  langs:
  - csharp
  - vb
  name: LoopCount
  nameWithType: RandomPasswordOptions.LoopCount
  fullName: SearchAThing.Util.RandomPasswordOptions.LoopCount
  type: Property
  source:
    id: LoopCount
    path: Z:\netcore-util\netcore-util\Password.cs
    startLine: 74
  assemblies:
  - netcore-util
  namespace: SearchAThing.Util
  summary: "\ndefault: 0\n"
  example: []
  syntax:
    content: public int LoopCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property LoopCount As Integer
  overload: SearchAThing.Util.RandomPasswordOptions.LoopCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SearchAThing.Util
  commentId: N:SearchAThing.Util
  name: SearchAThing.Util
  nameWithType: SearchAThing.Util
  fullName: SearchAThing.Util
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.SearchAThing.UtilExt.ToExpando
  commentId: M:SearchAThing.UtilExt.ToExpando(System.Object)
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.ToExpando(System.Object)
  name: ToExpando()
  nameWithType: UtilExt.ToExpando()
  fullName: SearchAThing.UtilExt.ToExpando()
  spec.csharp:
  - uid: SearchAThing.UtilExt.ToExpando
    name: ToExpando
    nameWithType: UtilExt.ToExpando
    fullName: SearchAThing.UtilExt.ToExpando
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.ToExpando
    name: ToExpando
    nameWithType: UtilExt.ToExpando
    fullName: SearchAThing.UtilExt.ToExpando
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{SearchAThing.Util.RandomPasswordOptions,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  name: GetMemberNames<RandomPasswordOptions>(Expression<Func<RandomPasswordOptions, Object>>)
  nameWithType: UtilExt.GetMemberNames<RandomPasswordOptions>(Expression<Func<RandomPasswordOptions, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberNames<SearchAThing.Util.RandomPasswordOptions>(Expression<Func<SearchAThing.Util.RandomPasswordOptions, System.Object>>)
  nameWithType.vb: UtilExt.GetMemberNames(Of RandomPasswordOptions)(Expression(Of Func(Of RandomPasswordOptions, Object)))
  fullName.vb: SearchAThing.UtilExt.GetMemberNames(Of SearchAThing.Util.RandomPasswordOptions)(Expression(Of Func(Of SearchAThing.Util.RandomPasswordOptions, System.Object)))
  name.vb: GetMemberNames(Of RandomPasswordOptions)(Expression(Of Func(Of RandomPasswordOptions, Object)))
  spec.csharp:
  - uid: SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{``0,System.Object}})
    name: GetMemberNames<RandomPasswordOptions>
    nameWithType: UtilExt.GetMemberNames<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.GetMemberNames<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.GetMemberNames``1(Expression{Func{``0,System.Object}})
    name: GetMemberNames(Of RandomPasswordOptions)
    nameWithType: UtilExt.GetMemberNames(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.GetMemberNames(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.GetMemberName``1(Expression{Func{SearchAThing.Util.RandomPasswordOptions,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  name: GetMemberName<RandomPasswordOptions>(Expression<Func<RandomPasswordOptions, Object>>)
  nameWithType: UtilExt.GetMemberName<RandomPasswordOptions>(Expression<Func<RandomPasswordOptions, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberName<SearchAThing.Util.RandomPasswordOptions>(Expression<Func<SearchAThing.Util.RandomPasswordOptions, System.Object>>)
  nameWithType.vb: UtilExt.GetMemberName(Of RandomPasswordOptions)(Expression(Of Func(Of RandomPasswordOptions, Object)))
  fullName.vb: SearchAThing.UtilExt.GetMemberName(Of SearchAThing.Util.RandomPasswordOptions)(Expression(Of Func(Of SearchAThing.Util.RandomPasswordOptions, System.Object)))
  name.vb: GetMemberName(Of RandomPasswordOptions)(Expression(Of Func(Of RandomPasswordOptions, Object)))
  spec.csharp:
  - uid: SearchAThing.UtilExt.GetMemberName``1(Expression{Func{``0,System.Object}})
    name: GetMemberName<RandomPasswordOptions>
    nameWithType: UtilExt.GetMemberName<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.GetMemberName<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.GetMemberName``1(Expression{Func{``0,System.Object}})
    name: GetMemberName(Of RandomPasswordOptions)
    nameWithType: UtilExt.GetMemberName(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.GetMemberName(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.Eval``2(Func{SearchAThing.Util.RandomPasswordOptions,{U}})
  commentId: M:SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  name: Eval<RandomPasswordOptions, U>(Func<RandomPasswordOptions, U>)
  nameWithType: UtilExt.Eval<RandomPasswordOptions, U>(Func<RandomPasswordOptions, U>)
  fullName: SearchAThing.UtilExt.Eval<SearchAThing.Util.RandomPasswordOptions, U>(Func<SearchAThing.Util.RandomPasswordOptions, U>)
  nameWithType.vb: UtilExt.Eval(Of RandomPasswordOptions, U)(Func(Of RandomPasswordOptions, U))
  fullName.vb: SearchAThing.UtilExt.Eval(Of SearchAThing.Util.RandomPasswordOptions, U)(Func(Of SearchAThing.Util.RandomPasswordOptions, U))
  name.vb: Eval(Of RandomPasswordOptions, U)(Func(Of RandomPasswordOptions, U))
  spec.csharp:
  - uid: SearchAThing.UtilExt.Eval``2(Func{``0,``1})
    name: Eval<RandomPasswordOptions, U>
    nameWithType: UtilExt.Eval<RandomPasswordOptions, U>
    fullName: SearchAThing.UtilExt.Eval<SearchAThing.Util.RandomPasswordOptions, U>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.Eval``2(Func{``0,``1})
    name: Eval(Of RandomPasswordOptions, U)
    nameWithType: UtilExt.Eval(Of RandomPasswordOptions, U)
    fullName: SearchAThing.UtilExt.Eval(Of SearchAThing.Util.RandomPasswordOptions, U)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.Assign``1(SearchAThing.Util.RandomPasswordOptions,Func{PropertyInfo,System.Boolean})
  commentId: M:SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  name: Assign<RandomPasswordOptions>(RandomPasswordOptions, Func<PropertyInfo, Boolean>)
  nameWithType: UtilExt.Assign<RandomPasswordOptions>(RandomPasswordOptions, Func<PropertyInfo, Boolean>)
  fullName: SearchAThing.UtilExt.Assign<SearchAThing.Util.RandomPasswordOptions>(SearchAThing.Util.RandomPasswordOptions, Func<PropertyInfo, System.Boolean>)
  nameWithType.vb: UtilExt.Assign(Of RandomPasswordOptions)(RandomPasswordOptions, Func(Of PropertyInfo, Boolean))
  fullName.vb: SearchAThing.UtilExt.Assign(Of SearchAThing.Util.RandomPasswordOptions)(SearchAThing.Util.RandomPasswordOptions, Func(Of PropertyInfo, System.Boolean))
  name.vb: Assign(Of RandomPasswordOptions)(RandomPasswordOptions, Func(Of PropertyInfo, Boolean))
  spec.csharp:
  - uid: SearchAThing.UtilExt.Assign``1(``0,Func{PropertyInfo,System.Boolean})
    name: Assign<RandomPasswordOptions>
    nameWithType: UtilExt.Assign<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.Assign<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.Assign``1(``0,Func{PropertyInfo,System.Boolean})
    name: Assign(Of RandomPasswordOptions)
    nameWithType: UtilExt.Assign(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.Assign(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFrom``1(SearchAThing.Util.RandomPasswordOptions,Func{PropertyInfo,System.Boolean})
  commentId: M:SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  name: CopyFrom<RandomPasswordOptions>(RandomPasswordOptions, Func<PropertyInfo, Boolean>)
  nameWithType: UtilExt.CopyFrom<RandomPasswordOptions>(RandomPasswordOptions, Func<PropertyInfo, Boolean>)
  fullName: SearchAThing.UtilExt.CopyFrom<SearchAThing.Util.RandomPasswordOptions>(SearchAThing.Util.RandomPasswordOptions, Func<PropertyInfo, System.Boolean>)
  nameWithType.vb: UtilExt.CopyFrom(Of RandomPasswordOptions)(RandomPasswordOptions, Func(Of PropertyInfo, Boolean))
  fullName.vb: SearchAThing.UtilExt.CopyFrom(Of SearchAThing.Util.RandomPasswordOptions)(SearchAThing.Util.RandomPasswordOptions, Func(Of PropertyInfo, System.Boolean))
  name.vb: CopyFrom(Of RandomPasswordOptions)(RandomPasswordOptions, Func(Of PropertyInfo, Boolean))
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFrom``1(``0,Func{PropertyInfo,System.Boolean})
    name: CopyFrom<RandomPasswordOptions>
    nameWithType: UtilExt.CopyFrom<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.CopyFrom<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFrom``1(``0,Func{PropertyInfo,System.Boolean})
    name: CopyFrom(Of RandomPasswordOptions)
    nameWithType: UtilExt.CopyFrom(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.CopyFrom(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFromCustom``1(SearchAThing.Util.RandomPasswordOptions,SearchAThing.UtilExt.CopyFromCustomDelegate)
  commentId: M:SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  name: CopyFromCustom<RandomPasswordOptions>(RandomPasswordOptions, UtilExt.CopyFromCustomDelegate)
  nameWithType: UtilExt.CopyFromCustom<RandomPasswordOptions>(RandomPasswordOptions, UtilExt.CopyFromCustomDelegate)
  fullName: SearchAThing.UtilExt.CopyFromCustom<SearchAThing.Util.RandomPasswordOptions>(SearchAThing.Util.RandomPasswordOptions, SearchAThing.UtilExt.CopyFromCustomDelegate)
  nameWithType.vb: UtilExt.CopyFromCustom(Of RandomPasswordOptions)(RandomPasswordOptions, UtilExt.CopyFromCustomDelegate)
  fullName.vb: SearchAThing.UtilExt.CopyFromCustom(Of SearchAThing.Util.RandomPasswordOptions)(SearchAThing.Util.RandomPasswordOptions, SearchAThing.UtilExt.CopyFromCustomDelegate)
  name.vb: CopyFromCustom(Of RandomPasswordOptions)(RandomPasswordOptions, UtilExt.CopyFromCustomDelegate)
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFromCustom``1(``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
    name: CopyFromCustom<RandomPasswordOptions>
    nameWithType: UtilExt.CopyFromCustom<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.CopyFromCustom<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.UtilExt.CopyFromCustomDelegate
    name: UtilExt.CopyFromCustomDelegate
    nameWithType: UtilExt.CopyFromCustomDelegate
    fullName: SearchAThing.UtilExt.CopyFromCustomDelegate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFromCustom``1(``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
    name: CopyFromCustom(Of RandomPasswordOptions)
    nameWithType: UtilExt.CopyFromCustom(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.CopyFromCustom(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.UtilExt.CopyFromCustomDelegate
    name: UtilExt.CopyFromCustomDelegate
    nameWithType: UtilExt.CopyFromCustomDelegate
    fullName: SearchAThing.UtilExt.CopyFromCustomDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFromExclude``1(SearchAThing.Util.RandomPasswordOptions,System.String[])
  commentId: M:SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  name: CopyFromExclude<RandomPasswordOptions>(RandomPasswordOptions, String[])
  nameWithType: UtilExt.CopyFromExclude<RandomPasswordOptions>(RandomPasswordOptions, String[])
  fullName: SearchAThing.UtilExt.CopyFromExclude<SearchAThing.Util.RandomPasswordOptions>(SearchAThing.Util.RandomPasswordOptions, System.String[])
  nameWithType.vb: UtilExt.CopyFromExclude(Of RandomPasswordOptions)(RandomPasswordOptions, String())
  fullName.vb: SearchAThing.UtilExt.CopyFromExclude(Of SearchAThing.Util.RandomPasswordOptions)(SearchAThing.Util.RandomPasswordOptions, System.String())
  name.vb: CopyFromExclude(Of RandomPasswordOptions)(RandomPasswordOptions, String())
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFromExclude``1(``0,System.String[])
    name: CopyFromExclude<RandomPasswordOptions>
    nameWithType: UtilExt.CopyFromExclude<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.CopyFromExclude<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFromExclude``1(``0,System.String[])
    name: CopyFromExclude(Of RandomPasswordOptions)
    nameWithType: UtilExt.CopyFromExclude(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.CopyFromExclude(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Util.RandomPasswordOptions.SearchAThing.UtilExt.CopyFromInclude``1(SearchAThing.Util.RandomPasswordOptions,System.String[])
  commentId: M:SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  name: CopyFromInclude<RandomPasswordOptions>(RandomPasswordOptions, String[])
  nameWithType: UtilExt.CopyFromInclude<RandomPasswordOptions>(RandomPasswordOptions, String[])
  fullName: SearchAThing.UtilExt.CopyFromInclude<SearchAThing.Util.RandomPasswordOptions>(SearchAThing.Util.RandomPasswordOptions, System.String[])
  nameWithType.vb: UtilExt.CopyFromInclude(Of RandomPasswordOptions)(RandomPasswordOptions, String())
  fullName.vb: SearchAThing.UtilExt.CopyFromInclude(Of SearchAThing.Util.RandomPasswordOptions)(SearchAThing.Util.RandomPasswordOptions, System.String())
  name.vb: CopyFromInclude(Of RandomPasswordOptions)(RandomPasswordOptions, String())
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFromInclude``1(``0,System.String[])
    name: CopyFromInclude<RandomPasswordOptions>
    nameWithType: UtilExt.CopyFromInclude<RandomPasswordOptions>
    fullName: SearchAThing.UtilExt.CopyFromInclude<SearchAThing.Util.RandomPasswordOptions>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFromInclude``1(``0,System.String[])
    name: CopyFromInclude(Of RandomPasswordOptions)
    nameWithType: UtilExt.CopyFromInclude(Of RandomPasswordOptions)
    fullName: SearchAThing.UtilExt.CopyFromInclude(Of SearchAThing.Util.RandomPasswordOptions)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Util.RandomPasswordOptions
    name: RandomPasswordOptions
    nameWithType: RandomPasswordOptions
    fullName: SearchAThing.Util.RandomPasswordOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.SearchAThing.UtilExt.ToJson
  commentId: M:SearchAThing.UtilExt.ToJson(System.Object)
  parent: SearchAThing.UtilExt
  definition: SearchAThing.UtilExt.ToJson(System.Object)
  name: ToJson()
  nameWithType: UtilExt.ToJson()
  fullName: SearchAThing.UtilExt.ToJson()
  spec.csharp:
  - uid: SearchAThing.UtilExt.ToJson
    name: ToJson
    nameWithType: UtilExt.ToJson
    fullName: SearchAThing.UtilExt.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.ToJson
    name: ToJson
    nameWithType: UtilExt.ToJson
    fullName: SearchAThing.UtilExt.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.ToExpando(System.Object)
  commentId: M:SearchAThing.UtilExt.ToExpando(System.Object)
  isExternal: true
  name: ToExpando(Object)
  nameWithType: UtilExt.ToExpando(Object)
  fullName: SearchAThing.UtilExt.ToExpando(System.Object)
  spec.csharp:
  - uid: SearchAThing.UtilExt.ToExpando(System.Object)
    name: ToExpando
    nameWithType: UtilExt.ToExpando
    fullName: SearchAThing.UtilExt.ToExpando
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.ToExpando(System.Object)
    name: ToExpando
    nameWithType: UtilExt.ToExpando
    fullName: SearchAThing.UtilExt.ToExpando
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt
  commentId: T:SearchAThing.UtilExt
  parent: SearchAThing
  name: UtilExt
  nameWithType: UtilExt
  fullName: SearchAThing.UtilExt
- uid: SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
  isExternal: true
  name: GetMemberNames<T>(T, Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberNames<T>(T, Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberNames<T>(T, Expression<Func<T, System.Object>>)
  nameWithType.vb: UtilExt.GetMemberNames(Of T)(T, Expression(Of Func(Of T, Object)))
  fullName.vb: SearchAThing.UtilExt.GetMemberNames(Of T)(T, Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberNames(Of T)(T, Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
    name: GetMemberNames<T>
    nameWithType: UtilExt.GetMemberNames<T>
    fullName: SearchAThing.UtilExt.GetMemberNames<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.GetMemberNames``1(``0,Expression{Func{``0,System.Object}})
    name: GetMemberNames(Of T)
    nameWithType: UtilExt.GetMemberNames(Of T)
    fullName: SearchAThing.UtilExt.GetMemberNames(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  commentId: M:SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
  isExternal: true
  name: GetMemberName<T>(T, Expression<Func<T, Object>>)
  nameWithType: UtilExt.GetMemberName<T>(T, Expression<Func<T, Object>>)
  fullName: SearchAThing.UtilExt.GetMemberName<T>(T, Expression<Func<T, System.Object>>)
  nameWithType.vb: UtilExt.GetMemberName(Of T)(T, Expression(Of Func(Of T, Object)))
  fullName.vb: SearchAThing.UtilExt.GetMemberName(Of T)(T, Expression(Of Func(Of T, System.Object)))
  name.vb: GetMemberName(Of T)(T, Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
    name: GetMemberName<T>
    nameWithType: UtilExt.GetMemberName<T>
    fullName: SearchAThing.UtilExt.GetMemberName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.GetMemberName``1(``0,Expression{Func{``0,System.Object}})
    name: GetMemberName(Of T)
    nameWithType: UtilExt.GetMemberName(Of T)
    fullName: SearchAThing.UtilExt.GetMemberName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  commentId: M:SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
  isExternal: true
  name: Eval<T, U>(T, Func<T, U>)
  nameWithType: UtilExt.Eval<T, U>(T, Func<T, U>)
  fullName: SearchAThing.UtilExt.Eval<T, U>(T, Func<T, U>)
  nameWithType.vb: UtilExt.Eval(Of T, U)(T, Func(Of T, U))
  fullName.vb: SearchAThing.UtilExt.Eval(Of T, U)(T, Func(Of T, U))
  name.vb: Eval(Of T, U)(T, Func(Of T, U))
  spec.csharp:
  - uid: SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
    name: Eval<T, U>
    nameWithType: UtilExt.Eval<T, U>
    fullName: SearchAThing.UtilExt.Eval<T, U>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.Eval``2(``0,Func{``0,``1})
    name: Eval(Of T, U)
    nameWithType: UtilExt.Eval(Of T, U)
    fullName: SearchAThing.UtilExt.Eval(Of T, U)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  commentId: M:SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
  isExternal: true
  name: Assign<T>(T, T, Func<PropertyInfo, Boolean>)
  nameWithType: UtilExt.Assign<T>(T, T, Func<PropertyInfo, Boolean>)
  fullName: SearchAThing.UtilExt.Assign<T>(T, T, Func<PropertyInfo, System.Boolean>)
  nameWithType.vb: UtilExt.Assign(Of T)(T, T, Func(Of PropertyInfo, Boolean))
  fullName.vb: SearchAThing.UtilExt.Assign(Of T)(T, T, Func(Of PropertyInfo, System.Boolean))
  name.vb: Assign(Of T)(T, T, Func(Of PropertyInfo, Boolean))
  spec.csharp:
  - uid: SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
    name: Assign<T>
    nameWithType: UtilExt.Assign<T>
    fullName: SearchAThing.UtilExt.Assign<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.Assign``1(``0,``0,Func{PropertyInfo,System.Boolean})
    name: Assign(Of T)
    nameWithType: UtilExt.Assign(Of T)
    fullName: SearchAThing.UtilExt.Assign(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  commentId: M:SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
  isExternal: true
  name: CopyFrom<T>(T, T, Func<PropertyInfo, Boolean>)
  nameWithType: UtilExt.CopyFrom<T>(T, T, Func<PropertyInfo, Boolean>)
  fullName: SearchAThing.UtilExt.CopyFrom<T>(T, T, Func<PropertyInfo, System.Boolean>)
  nameWithType.vb: UtilExt.CopyFrom(Of T)(T, T, Func(Of PropertyInfo, Boolean))
  fullName.vb: SearchAThing.UtilExt.CopyFrom(Of T)(T, T, Func(Of PropertyInfo, System.Boolean))
  name.vb: CopyFrom(Of T)(T, T, Func(Of PropertyInfo, Boolean))
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
    name: CopyFrom<T>
    nameWithType: UtilExt.CopyFrom<T>
    fullName: SearchAThing.UtilExt.CopyFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFrom``1(``0,``0,Func{PropertyInfo,System.Boolean})
    name: CopyFrom(Of T)
    nameWithType: UtilExt.CopyFrom(Of T)
    fullName: SearchAThing.UtilExt.CopyFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  commentId: M:SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
  name: CopyFromCustom<T>(T, T, UtilExt.CopyFromCustomDelegate)
  nameWithType: UtilExt.CopyFromCustom<T>(T, T, UtilExt.CopyFromCustomDelegate)
  fullName: SearchAThing.UtilExt.CopyFromCustom<T>(T, T, SearchAThing.UtilExt.CopyFromCustomDelegate)
  nameWithType.vb: UtilExt.CopyFromCustom(Of T)(T, T, UtilExt.CopyFromCustomDelegate)
  fullName.vb: SearchAThing.UtilExt.CopyFromCustom(Of T)(T, T, SearchAThing.UtilExt.CopyFromCustomDelegate)
  name.vb: CopyFromCustom(Of T)(T, T, UtilExt.CopyFromCustomDelegate)
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
    name: CopyFromCustom<T>
    nameWithType: UtilExt.CopyFromCustom<T>
    fullName: SearchAThing.UtilExt.CopyFromCustom<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.UtilExt.CopyFromCustomDelegate
    name: UtilExt.CopyFromCustomDelegate
    nameWithType: UtilExt.CopyFromCustomDelegate
    fullName: SearchAThing.UtilExt.CopyFromCustomDelegate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFromCustom``1(``0,``0,SearchAThing.UtilExt.CopyFromCustomDelegate)
    name: CopyFromCustom(Of T)
    nameWithType: UtilExt.CopyFromCustom(Of T)
    fullName: SearchAThing.UtilExt.CopyFromCustom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.UtilExt.CopyFromCustomDelegate
    name: UtilExt.CopyFromCustomDelegate
    nameWithType: UtilExt.CopyFromCustomDelegate
    fullName: SearchAThing.UtilExt.CopyFromCustomDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  commentId: M:SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
  isExternal: true
  name: CopyFromExclude<T>(T, T, String[])
  nameWithType: UtilExt.CopyFromExclude<T>(T, T, String[])
  fullName: SearchAThing.UtilExt.CopyFromExclude<T>(T, T, System.String[])
  nameWithType.vb: UtilExt.CopyFromExclude(Of T)(T, T, String())
  fullName.vb: SearchAThing.UtilExt.CopyFromExclude(Of T)(T, T, System.String())
  name.vb: CopyFromExclude(Of T)(T, T, String())
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
    name: CopyFromExclude<T>
    nameWithType: UtilExt.CopyFromExclude<T>
    fullName: SearchAThing.UtilExt.CopyFromExclude<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFromExclude``1(``0,``0,System.String[])
    name: CopyFromExclude(Of T)
    nameWithType: UtilExt.CopyFromExclude(Of T)
    fullName: SearchAThing.UtilExt.CopyFromExclude(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  commentId: M:SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
  isExternal: true
  name: CopyFromInclude<T>(T, T, String[])
  nameWithType: UtilExt.CopyFromInclude<T>(T, T, String[])
  fullName: SearchAThing.UtilExt.CopyFromInclude<T>(T, T, System.String[])
  nameWithType.vb: UtilExt.CopyFromInclude(Of T)(T, T, String())
  fullName.vb: SearchAThing.UtilExt.CopyFromInclude(Of T)(T, T, System.String())
  name.vb: CopyFromInclude(Of T)(T, T, String())
  spec.csharp:
  - uid: SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
    name: CopyFromInclude<T>
    nameWithType: UtilExt.CopyFromInclude<T>
    fullName: SearchAThing.UtilExt.CopyFromInclude<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.CopyFromInclude``1(``0,``0,System.String[])
    name: CopyFromInclude(Of T)
    nameWithType: UtilExt.CopyFromInclude(Of T)
    fullName: SearchAThing.UtilExt.CopyFromInclude(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.UtilExt.ToJson(System.Object)
  commentId: M:SearchAThing.UtilExt.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: UtilExt.ToJson(Object)
  fullName: SearchAThing.UtilExt.ToJson(System.Object)
  spec.csharp:
  - uid: SearchAThing.UtilExt.ToJson(System.Object)
    name: ToJson
    nameWithType: UtilExt.ToJson
    fullName: SearchAThing.UtilExt.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.UtilExt.ToJson(System.Object)
    name: ToJson
    nameWithType: UtilExt.ToJson
    fullName: SearchAThing.UtilExt.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing
  commentId: N:SearchAThing
  name: SearchAThing
  nameWithType: SearchAThing
  fullName: SearchAThing
- uid: SearchAThing.Util.RandomPasswordOptions.AllowNumber*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AllowNumber
  name: AllowNumber
  nameWithType: RandomPasswordOptions.AllowNumber
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowNumber
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SearchAThing.Util.RandomPasswordOptions.AllowLetter*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AllowLetter
  name: AllowLetter
  nameWithType: RandomPasswordOptions.AllowLetter
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowLetter
- uid: SearchAThing.Util.RandomPasswordOptions.AllowLowercase*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AllowLowercase
  name: AllowLowercase
  nameWithType: RandomPasswordOptions.AllowLowercase
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowLowercase
- uid: SearchAThing.Util.RandomPasswordOptions.AllowUppercase*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AllowUppercase
  name: AllowUppercase
  nameWithType: RandomPasswordOptions.AllowUppercase
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowUppercase
- uid: SearchAThing.Util.RandomPasswordOptions.AllowSpecial*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AllowSpecial
  name: AllowSpecial
  nameWithType: RandomPasswordOptions.AllowSpecial
  fullName: SearchAThing.Util.RandomPasswordOptions.AllowSpecial
- uid: SearchAThing.Util.RandomPasswordOptions.MaxSpecial*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.MaxSpecial
  name: MaxSpecial
  nameWithType: RandomPasswordOptions.MaxSpecial
  fullName: SearchAThing.Util.RandomPasswordOptions.MaxSpecial
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SearchAThing.Util.RandomPasswordOptions.Length*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.Length
  name: Length
  nameWithType: RandomPasswordOptions.Length
  fullName: SearchAThing.Util.RandomPasswordOptions.Length
- uid: SearchAThing.Util.RandomPasswordOptions.AvoidChars*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AvoidChars
  name: AvoidChars
  nameWithType: RandomPasswordOptions.AvoidChars
  fullName: SearchAThing.Util.RandomPasswordOptions.AvoidChars
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber
  name: AtLeastOneNumber
  nameWithType: RandomPasswordOptions.AtLeastOneNumber
  fullName: SearchAThing.Util.RandomPasswordOptions.AtLeastOneNumber
- uid: SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase
  name: AtLeastOneUppercase
  nameWithType: RandomPasswordOptions.AtLeastOneUppercase
  fullName: SearchAThing.Util.RandomPasswordOptions.AtLeastOneUppercase
- uid: SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial
  name: AtLeastOneSpecial
  nameWithType: RandomPasswordOptions.AtLeastOneSpecial
  fullName: SearchAThing.Util.RandomPasswordOptions.AtLeastOneSpecial
- uid: SearchAThing.Util.RandomPasswordOptions.LoopCount*
  commentId: Overload:SearchAThing.Util.RandomPasswordOptions.LoopCount
  name: LoopCount
  nameWithType: RandomPasswordOptions.LoopCount
  fullName: SearchAThing.Util.RandomPasswordOptions.LoopCount
